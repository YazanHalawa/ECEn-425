; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_yakc_1:
	DB	"initialization finished",0xA,0xD,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	33
	; >>>>> void YKInitialize(void) { 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	36
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	37
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	38
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	39
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	40
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	41
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	42
	; >>>>> YKCurTask = 0; 
	mov	word [YKCurTask], 0
	; >>>>> Line:	43
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	44
	; >>>>> YKAvailTCBList = 0; 
	mov	word [YKAvailTCBList], 0
	; >>>>> Line:	46
	; >>>>> YKAvailTCBList = &(YKTCBArr 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	47
	; >>>>> for (i = 0; i <= 100; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_5
L_yakc_4:
	; >>>>> Line:	48
	; >>>>> if (i == 0) 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_8
	; >>>>> Line:	49
	; >>>>> YKTCBArray[i].prev = 0; 
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_9
L_yakc_8:
	; >>>>> Line:	51
	; >>>>> YKTCBArray[i].prev = &(YKTCBArray[i-1]); 
	mov	ax, word [bp-2]
	dec	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 12
	pop	ax
	mov	word [si], ax
L_yakc_9:
	; >>>>> Line:	52
	; >>>>> if (i == 100) 
	cmp	word [bp-2], 100
	jne	L_yakc_10
	; >>>>> Line:	53
	; >>>>> YKTCBArray[i].next = 0; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	55
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_11:
L_yakc_7:
	inc	word [bp-2]
L_yakc_5:
	cmp	word [bp-2], 100
	jle	L_yakc_4
L_yakc_6:
	; >>>>> Line:	59
	; >>>>> YKNewTask(YKIdleTask, (void *)&YKIdleTask[128], 100 +1); 
	mov	al, 101
	push	ax
	mov	ax, (YKIdleTask+256)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	60
	; >>>>> YKCurTask = &YKTCBArray[101]; 
	mov	word [YKCurTask], (YKTCBArray+1414)
	; >>>>> Line:	61
	; >>>>> YKCurTask->priority = 101; 
	mov	si, word [YKCurTask]
	add	si, 6
	mov	word [si], 101
	; >>>>> Line:	62
	; >>>>> printString("initialization finished\n\r"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_3
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	65
	; >>>>> void YKIdleTask(void) { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	66
	; >>>>> while(1) { 
	jmp	L_yakc_16
L_yakc_15:
	; >>>>> Line:	67
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	68
	; >>>>> YKIdleCount = YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	69
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_16:
	jmp	L_yakc_15
L_yakc_17:
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	jmp	L_yakc_14
L_yakc_23:
	DB	"  YKCurTask->priority is now: ",0
L_yakc_22:
	DB	"new task created, but scheduler not called",0xA,0xD,0
L_yakc_21:
	DB	"  tmp->priority: ",0
L_yakc_20:
	DB	"  YKCurTask->priority: ",0
L_yakc_19:
	DB	"  priority: ",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	73
	; >>>>> t 
	jmp	L_yakc_24
L_yakc_25:
	; >>>>> Line:	78
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	80
	; >>>>> tmp = YKAvailTCBList; 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-2], ax
	; >>>>> Line:	81
	; >>>>> YKAvailTCBList = tmp->next; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	83
	; >>>>> tmp->startingAddress = task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	84
	; >>>>> tmp->stackptr = taskStack; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	85
	; >>>>> tmp->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	87
	; >>>>> *(taskStack-1) = 0x0200; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, ax
	mov	word [si], 512
	; >>>>> Line:	88
	; >>>>> *(taskStack-2) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 4
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	89
	; >>>>> *(taskStack-3) = (int)task; 
	mov	ax, word [bp+6]
	sub	ax, 6
	mov	si, ax
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	90
	; >>>>> *(taskStack-4) = (int)&taskStack[0]; 
	mov	ax, word [bp+6]
	sub	ax, 8
	mov	si, ax
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	91
	; >>>>> *(taskStack-5) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 10
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	92
	; >>>>> *(taskStack-6) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 12
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	93
	; >>>>> *(taskStack-7) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 14
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	94
	; >>>>> *(taskStack-8) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 16
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	95
	; >>>>> *(taskStack-9) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 18
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	96
	; >>>>> *(taskStack-10) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 20
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	97
	; >>>>> *(taskSt 
	mov	ax, word [bp+6]
	sub	ax, 22
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	98
	; >>>>> *(taskStack-12) = 0; 
	mov	ax, word [bp+6]
	sub	ax, 24
	mov	si, ax
	mov	word [si], 0
	; >>>>> Line:	103
	; >>>>> if (YKRdyList == 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_26
	; >>>>> Line:	104
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	105
	; >>>>> tmp->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	106
	; >>>>> tmp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	110
	; >>>>> tmp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	111
	; >>>>> while (tmp2->priority < tmp->priority) 
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	112
	; >>>>> tmp2 = tmp2->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_29:
	mov	si, word [bp-4]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_28
L_yakc_30:
	; >>>>> Line:	113
	; >>>>> if (tmp2->prev == 0) 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_31
	; >>>>> Line:	114
	; >>>>> YKRdyList = tmp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	116
	; >>>>> tmp2->prev->next = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_32:
	; >>>>> Line:	117
	; >>>>> tmp->prev = tmp2->prev; 
	mov	si, word [bp-4]
	add	si, 12
	mov	di, word [bp-2]
	add	di, 12
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	118
	; >>>>> tmp->next = tmp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	119
	; >>>>> tmp2->prev = tmp; 
	mov	si, word [bp-4]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_27:
	; >>>>> Line:	125
	; >>>>> printString("  priority: "); 
	mov	ax, L_yakc_19
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printInt(priority); 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printString("  YKCurTask->priority: "); 
	mov	ax, L_yakc_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	129
	; >>>>> printInt(YKCurTask->priority); 
	mov	si, word [YKCurTask]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printString("  tmp->priority: "); 
	mov	ax, L_yakc_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printInt(tmp->priority); 
	mov	si, word [bp-2]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> if (priority < YKCurTask->priority) { 
	mov	si, word [YKCurTask]
	add	si, 6
	mov	al, byte [bp+8]
	xor	ah, ah
	cmp	ax, word [si]
	jge	L_yakc_33
	; >>>>> Line:	136
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	138
	; >>>>> printString("new task created, but scheduler not called\n\r"); 
	mov	ax, L_yakc_22
	push	ax
	call	printString
	add	sp, 2
L_yakc_34:
	; >>>>> Line:	140
	; >>>>> printString("  YKCurTask->priority is now: "); 
	mov	ax, L_yakc_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> printInt(YKCurTask->priority); 
	mov	si, word [YKCurTask]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	142
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_24:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_25
	ALIGN	2
YKRun:
	; >>>>> Line:	145
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	147
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	148
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	jmp	L_yakc_37
L_yakc_43:
	DB	"pointers equal...",0xA,0xD,0
L_yakc_42:
	DB	"dispatcher NOT called",0xA,0xD,0
L_yakc_41:
	DB	"dispatcher called",0xA,0xD,0
L_yakc_40:
	DB	"  YKRdyList->priority: ",0
L_yakc_39:
	DB	"--Starting Dispatcher--",0xA,0xD,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	151
	; >>>>> void YKScheduler() { 
	jmp	L_yakc_44
L_yakc_45:
	; >>>>> Line:	155
	; >>>>> printString("--Starting Dispatcher--\n\r"); 
	mov	ax, L_yakc_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printString("  YKCurTask->priority: "); 
	mov	ax, L_yakc_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> pr 
	mov	si, word [YKCurTask]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	158
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printString("  YKRdyList->priority: "); 
	mov	ax, L_yakc_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printInt(YKRdyList->priority); 
	mov	si, word [YKRdyList]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> if (YKCurTask->priority != YKRdyList->priority) { 
	mov	si, word [YKCurTask]
	add	si, 6
	mov	di, word [YKRdyList]
	add	di, 6
	mov	ax, word [di]
	cmp	ax, word [si]
	je	L_yakc_46
	; >>>>> Line:	163
	; >>>>> if (running) { 
	mov	ax, word [running]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	164
	; >>>>> printString("dispatcher called\n\r"); 
	mov	ax, L_yakc_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	165
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
	jmp	L_yakc_48
L_yakc_47:
	; >>>>> Line:	167
	; >>>>> printString("dispatcher NOT called\n\r"); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
L_yakc_48:
	jmp	L_yakc_49
L_yakc_46:
	; >>>>> Line:	170
	; >>>>> printString("pointers equal...\n\r"); 
	mov	ax, L_yakc_43
	push	ax
	call	printString
	add	sp, 2
L_yakc_49:
	mov	sp, bp
	pop	bp
	ret
L_yakc_44:
	push	bp
	mov	bp, sp
	jmp	L_yakc_45
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	1414 db 0
running:
	TIMES	2 db 0
idleTaskStkp:
	TIMES	256 db 0
nestingLevel:
	TIMES	2 db 0
