; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_yakc_1:
	DB	"initialization finished",0xA,0xD,0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	33
	; >>>>> void YKInitialize(void) { 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	36
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	37
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	38
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	39
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	40
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	41
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	42
	; >>>>> YKCurTask = 0; 
	mov	word [YKCurTask], 0
	; >>>>> Line:	43
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	44
	; >>>>> YKAvailTCBList = 0; 
	mov	word [YKAvailTCBList], 0
	; >>>>> Line:	47
	; >>>>> for (i = 0; i <= 100; 
	mov	word [bp-2], 0
	jmp	L_yakc_5
L_yakc_4:
	; >>>>> Line:	48
	; >>>>> if (i == 0) 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_8
	; >>>>> Line:	49
	; >>>>> YKTCBArray[i].prev = 0; 
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_9
L_yakc_8:
	; >>>>> Line:	51
	; >>>>> YKTCBArray[i].prev = &(YKTCBArray[i-1]); 
	mov	ax, word [bp-2]
	dec	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 12
	pop	ax
	mov	word [si], ax
L_yakc_9:
	; >>>>> Line:	52
	; >>>>> if (i == 100) 
	cmp	word [bp-2], 100
	jne	L_yakc_10
	; >>>>> Line:	53
	; >>>>> YKTCBArray[i].next = 0; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	55
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 10
	pop	ax
	mov	word [si], ax
L_yakc_11:
L_yakc_7:
	inc	word [bp-2]
L_yakc_5:
	cmp	word [bp-2], 100
	jle	L_yakc_4
L_yakc_6:
	; >>>>> Line:	59
	; >>>>> YKNewTask(YKIdleTask, (void *)&YKIdleTask[128], 100 +1); 
	mov	al, 101
	push	ax
	mov	ax, (YKIdleTask+256)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	62
	; >>>>> printString("initialization finished\n\r"); 
	mov	ax, L_yakc_1
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_3
L_yakc_13:
	DB	"-in Idle Task",0xA,0xD,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	65
	; >>>>> void YKIdleTask(void) { 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	66
	; >>>>> printString("-in Idle Task\n\r"); 
	mov	ax, L_yakc_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> while(1) { 
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	68
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	69
	; >>>>> YKIdleCount = YKIdleCount+1; 
	mov	ax, word [YKIdleCount]
	inc	ax
	mov	word [YKIdleCount], ax
	; >>>>> Line:	70
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_17:
	jmp	L_yakc_16
L_yakc_18:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
L_yakc_23:
	DB	"  YKCurTask->priority is now: ",0
L_yakc_22:
	DB	"new task created, but scheduler not called",0xA,0xD,0
L_yakc_21:
	DB	"  YKCurTask->priority: ",0
L_yakc_20:
	DB	"  priority: ",0
	ALIGN	2
YKNewTask:
	; >>>>> Line:	74
	; >>>>> n; 
	jmp	L_yakc_24
L_yakc_25:
	; >>>>> Line:	82
	; >>>>> insertion->startingAddress = task; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	83
	; >>>>> insertion->stackptr = taskStack; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	84
	; >>>>> insertion->priority = priority; 
	mov	si, word [bp-2]
	add	si, 6
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	109
	; >>>>> if (YKRdyList == 0) { 
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_26
	; >>>>> Line:	110
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	; >>>>> Line:	111
	; >>>>> insertion->next = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	112
	; >>>>> insertion->prev = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	116
	; >>>>> iter = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	117
	; >>>>> while (iter->next != 0 && iter->next->priority < insertion->priority) { 
	jmp	L_yakc_29
L_yakc_28:
	; >>>>> Line:	118
	; >>>>> iter = iter->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_29:
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_31
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 6
	mov	di, word [bp-2]
	add	di, 6
	mov	al, byte [di]
	cmp	al, byte [si]
	ja	L_yakc_28
L_yakc_31:
L_yakc_30:
	; >>>>> Line:	120
	; >>>>> if (iter->next != 0) { 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_32
	; >>>>> Line:	121
	; >>>>> iter->next->prev = insertion; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_32:
	; >>>>> Line:	123
	; >>>>> insertion->next = iter->next; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	124
	; >>>>> iter->next = inserti 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	125
	; >>>>> insertion->prev = iter; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_27:
	; >>>>> Line:	132
	; >>>>> printString("  priority: "); 
	mov	ax, L_yakc_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printChar(priority); 
	push	word [bp+8]
	call	printChar
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString("  YKCurTask->priority: "); 
	mov	ax, L_yakc_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printChar(YKCurTask->priority); 
	mov	si, word [YKCurTask]
	add	si, 6
	push	word [si]
	call	printChar
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	138
	; >>>>> if (YKCurTask != 0 && priority < YKCurTask->priority) { 
	mov	ax, word [YKCurTask]
	test	ax, ax
	je	L_yakc_33
	mov	si, word [YKCurTask]
	add	si, 6
	mov	al, byte [bp+8]
	cmp	al, byte [si]
	jae	L_yakc_33
	; >>>>> Line:	140
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	142
	; >>>>> printString("new task created, but scheduler not called\n\r"); 
	mov	ax, L_yakc_22
	push	ax
	call	printString
	add	sp, 2
L_yakc_34:
	; >>>>> Line:	144
	; >>>>> printString("  YKCurTask->priority is now: "); 
	mov	ax, L_yakc_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	145
	; >>>>> printChar(YKCurTask->priority); 
	mov	si, word [YKCurTask]
	add	si, 6
	push	word [si]
	call	printChar
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_24:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_25
	ALIGN	2
YKRun:
	; >>>>> Line:	149
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	151
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	152
	; >>>>> ); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	jmp	L_yakc_37
L_yakc_43:
	DB	"pointers equal...",0xA,0xD,0
L_yakc_42:
	DB	"dispatcher NOT called",0xA,0xD,0
L_yakc_41:
	DB	"dispatcher called",0xA,0xD,0
L_yakc_40:
	DB	"  YKRdyList->priority: ",0
L_yakc_39:
	DB	"--Starting Dispatcher--",0xA,0xD,0
	ALIGN	2
YKScheduler:
	; >>>>> Line:	155
	; >>>>> void YKScheduler() { 
	jmp	L_yakc_44
L_yakc_45:
	; >>>>> Line:	159
	; >>>>> printString("--Starting Dispatcher--\n\r"); 
	mov	ax, L_yakc_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printString("  YKCurTask->priority: "); 
	mov	ax, L_yakc_21
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> printInt(YKCurTask->priority); 
	mov	si, word [YKCurTask]
	add	si, 6
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	163
	; >>>>> printString("  YKRdyList->priority: "); 
	mov	ax, L_yakc_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> printInt(YKRdyList->priority); 
	mov	si, word [YKRdyList]
	add	si, 6
	mov	al, byte [si]
	xor	ah, ah
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	165
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_1+23)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	166
	; >>>>> if (YKCurTask != YKRdyList) { 
	mov	ax, word [YKRdyList]
	cmp	ax, word [YKCurTask]
	je	L_yakc_46
	; >>>>> Line:	167
	; >>>>> if (running) { 
	mov	ax, word [running]
	test	ax, ax
	je	L_yakc_47
	; >>>>> Line:	168
	; >>>>> printString("dispatcher called\n\r"); 
	mov	ax, L_yakc_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	169
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	170
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
	jmp	L_yakc_48
L_yakc_47:
	; >>>>> Line:	172
	; >>>>> printString("dispatcher NOT called\n\r"); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
L_yakc_48:
	jmp	L_yakc_49
L_yakc_46:
	; >>>>> Line:	175
	; >>>>> printString("pointers equal...\n\r"); 
	mov	ax, L_yakc_43
	push	ax
	call	printString
	add	sp, 2
L_yakc_49:
	mov	sp, bp
	pop	bp
	ret
L_yakc_44:
	push	bp
	mov	bp, sp
	jmp	L_yakc_45
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	1414 db 0
running:
	TIMES	2 db 0
idleTaskStkp:
	TIMES	256 db 0
nestingLevel:
	TIMES	2 db 0
