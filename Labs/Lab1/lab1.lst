     1                                          CPU     8086
     2                                          ORG     0h
     3                                  InterruptVectorTable:
     4                                          ; Internal x86 Interrupts:
     5 00000000 00000000                        dd      0 ; Reserved (Div err)  ; Int 00h
     6 00000004 00000000                        dd      0 ; Reserved (Step)     ; Int 01h
     7 00000008 00000000                        dd      0 ; Reserved (NMI)      ; Int 02h
     8 0000000C 00000000                        dd      0 ; Reserved (Break)    ; Int 03h
     9 00000010 00000000                        dd      0 ; Reserved (Overflow) ; Int 04h
    10 00000014 00000000                        dd      0                       ; Int 05h
    11 00000018 00000000                        dd      0                       ; Int 06h
    12 0000001C 00000000                        dd      0                       ; Int 07h
    13                                          ; Hardware Interrupts:
    14 00000020 00000000                        dd      0 ; Reset               ; Int 08h (IRQ 0)
    15 00000024 00000000                        dd      0 ; Tick                ; Int 09h (IRQ 1)
    16 00000028 00000000                        dd      0 ; Keyboard            ; Int 0Ah (IRQ 2)
    17 0000002C 00000000                        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
    18 00000030 00000000                        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
    19 00000034 00000000                        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
    20 00000038 00000000                        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
    21 0000003C 00000000                        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
    22                                          ; Software Interrupts:
    23 00000040 00000000                        dd      0 ; Reserved (PC BIOS)  ; Int 10h
    24 00000044 00000000                        dd      0                       ; Int 11h
    25 00000048 00000000                        dd      0                       ; Int 12h
    26 0000004C 00000000                        dd      0                       ; Int 13h
    27 00000050 00000000                        dd      0                       ; Int 14h
    28 00000054 00000000                        dd      0                       ; Int 15h
    29 00000058 00000000                        dd      0                       ; Int 16h
    30 0000005C 00000000                        dd      0                       ; Int 17h
    31 00000060 00000000                        dd      0                       ; Int 18h
    32 00000064 00000000                        dd      0                       ; Int 19h
    33 00000068 00000000                        dd      0                       ; Int 1Ah
    34 0000006C 00000000                        dd      0                       ; Int 1Bh
    35 00000070 00000000                        dd      0                       ; Int 1Ch
    36 00000074 00000000                        dd      0                       ; Int 1Dh
    37 00000078 00000000                        dd      0                       ; Int 1Eh
    38 0000007C 00000000                        dd      0                       ; Int 1Fh
    39 00000080 00000000                        dd      0                       ; Int 20h
    40 00000084 00000000                        dd      0 ; Reserved (DOS)      ; Int 21h
    41 00000088 00000000                        dd      0 ; Simptris Services   ; Int 22h
    42 0000008C 00000000                        dd      0                       ; Int 23h
    43 00000090 00000000                        dd      0                       ; Int 24h
    44 00000094 00000000                        dd      0                       ; Int 25h
    45 00000098 00000000                        dd      0                       ; Int 26h
    46 0000009C 00000000                        dd      0                       ; Int 27h
    47 000000A0 00000000                        dd      0                       ; Int 28h
    48 000000A4 00000000                        dd      0                       ; Int 29h
    49 000000A8 00000000                        dd      0                       ; Int 2Ah
    50 000000AC 00000000                        dd      0                       ; Int 2Bh
    51 000000B0 00000000                        dd      0                       ; Int 2Ch
    52 000000B4 00000000                        dd      0                       ; Int 2Dh
    53 000000B8 00000000                        dd      0                       ; Int 2Eh
    54 000000BC 00000000                        dd      0                       ; Int 2Fh
    55                                  KeyBuffer:                              ; Address 0xC0
    56 000000C0 0000                            dw      0
    57                                  NewPieceType:                           ; Address 0xC2
    58 000000C2 0000                            dw      0
    59                                  NewPieceID:                             ; Address 0xC4
    60 000000C4 0000                            dw      0
    61                                  NewPieceOrientation:                    ; Address 0xC6
    62 000000C6 0000                            dw      0
    63                                  NewPieceColumn:                         ; Address 0xC8
    64 000000C8 0000                            dw      0
    65                                  TouchdownID:                            ; Address 0xCA
    66 000000CA 0000                    	dw	0
    67                                  ScreenBitMap0:                          ; Address 0xCC
    68 000000CC 0000                            dw      0
    69                                  ScreenBitMap1:
    70 000000CE 0000                            dw      0
    71                                  ScreenBitMap2:
    72 000000D0 0000                            dw      0
    73                                  ScreenBitMap3:
    74 000000D2 0000                            dw      0
    75                                  ScreenBitMap4:
    76 000000D4 0000                            dw      0
    77                                  ScreenBitMap5:
    78 000000D6 0000                            dw      0
    79 000000D8 00<rept>                TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
    80 00000100 E92908                  	jmp	main
    81                                  ; This file contains support routines for 32-bit on the 8086.
    82                                  ; It is intended for use code generated by the C86 compiler.
    83                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84                                  SR_asldiv:			; l1 /= l2
    85 00000103 55                      	push	bp
    86 00000104 89E5                    	mov	bp,sp
    87 00000106 53                      	push	bx
    88 00000107 8B5E04                  	mov	bx,[bp+4]	; Get address of l1	(was push3)
    89 0000010A FF7608                  	push	word [bp+8]	; Push hi l2		(was push1)
    90 0000010D FF7606                  	push	word [bp+6]	; Push lo l2		(was push2)
    91 00000110 FF7702                  	push	word [bx+2]	; Push hi l1
    92 00000113 FF37                    	push	word [bx]	; Push lo l1
    93 00000115 E84301                  	call	SR_ldiv
    94 00000118 8B5E04                  	mov	bx,[bp+4]	; Restore l1 address
    95 0000011B 895702                  	mov	[bx+2],dx	; Store result
    96 0000011E 8907                    	mov	[bx],ax
    97 00000120 5B                      	pop	bx
    98 00000121 5D                      	pop	bp
    99 00000122 C3                      	ret
   100                                  SR_aslmod:			; l1 %= l2
   101 00000123 55                      	push	bp
   102 00000124 89E5                    	mov	bp,sp
   103 00000126 53                      	push	bx
   104 00000127 8B5E04                  	mov	bx,[bp+4]	; Get address of l1	(was push3)
   105 0000012A FF7608                  	push	word [bp+8]	; Push hi l2		(was push1)
   106 0000012D FF7606                  	push	word [bp+6]	; Push lo l2		(was push2)
   107 00000130 FF7702                  	push	word [bx+2]	; Push hi l1
   108 00000133 FF37                    	push	word [bx]	; Push lo l1
   109 00000135 E83401                  	call	SR_lmod
   110 00000138 8B5E04                  	mov	bx,[bp+4]	; Restore l1 address
   111 0000013B 895702                  	mov	[bx+2],dx	; Store result
   112 0000013E 8907                    	mov	[bx],ax
   113 00000140 5B                      	pop	bx
   114 00000141 5D                      	pop	bp
   115 00000142 C3                      	ret
   116                                  SR_aslmul:			; l1 *= l2
   117 00000143 55                      	push	bp
   118 00000144 89E5                    	mov	bp,sp
   119 00000146 53                      	push	bx
   120 00000147 8B5E04                  	mov	bx,[bp+4]	; Get address of l1	(was push3)
   121 0000014A FF7608                  	push	word [bp+8]	; Push hi l2		(was push1)
   122 0000014D FF7606                  	push	word [bp+6]	; Push lo l2		(was push2)
   123 00000150 FF7702                  	push	word [bx+2]	; Push hi l1
   124 00000153 FF37                    	push	word [bx]	; Push lo l1
   125 00000155 E84E02                  	call	SR_lmul
   126 00000158 81C40800                	add	sp,8
   127 0000015C 8B5E04                  	mov	bx,[bp+4]	; Restore l1 address
   128 0000015F 895702                  	mov	[bx+2],dx	; Store result
   129 00000162 8907                    	mov	[bx],ax
   130 00000164 5B                      	pop	bx
   131 00000165 5D                      	pop	bp
   132 00000166 C3                      	ret
   133                                  SR_aslshl:			; l1 <<= l2
   134 00000167 55                      	push	bp
   135 00000168 89E5                    	mov	bp,sp
   136 0000016A 53                      	push	bx
   137 0000016B 8B5E04                  	mov	bx,[bp+4]	; Get address of l1	(was push3)
   138 0000016E FF7608                  	push	word [bp+8]	; Push hi l2		(was push1)
   139 00000171 FF7606                  	push	word [bp+6]	; Push lo l2		(was push2)
   140 00000174 FF7702                  	push	word [bx+2]	; Push hi l1
   141 00000177 FF37                    	push	word [bx]	; Push lo l1
   142 00000179 E89501                  	call	SR_lshl
   143 0000017C 81C40800                	add	sp,8
   144 00000180 8B5E04                  	mov	bx,[bp+4]	; Restore l1 address
   145 00000183 895702                  	mov	[bx+2],dx	; Store result
   146 00000186 8907                    	mov	[bx],ax
   147 00000188 5B                      	pop	bx
   148 00000189 5D                      	pop	bp
   149 0000018A C3                      	ret
   150                                  SR_aslshr:			; l1 >>= l2
   151 0000018B 55                      	push	bp
   152 0000018C 89E5                    	mov	bp,sp
   153 0000018E 53                      	push	bx
   154 0000018F 8B5E04                  	mov	bx,[bp+4]	; Get address of l1	(was push3)
   155 00000192 FF7608                  	push	word [bp+8]	; Push hi l2		(was push1)
   156 00000195 FF7606                  	push	word [bp+6]	; Push lo l2		(was push2)
   157 00000198 FF7702                  	push	word [bx+2]	; Push hi l1
   158 0000019B FF37                    	push	word [bx]	; Push lo l1
   159 0000019D E8A301                  	call	SR_lshr
   160 000001A0 81C40800                	add	sp,8
   161 000001A4 8B5E04                  	mov	bx,[bp+4]	; Restore l1 address
   162 000001A7 895702                  	mov	[bx+2],dx	; Store result
   163 000001AA 8907                    	mov	[bx],ax
   164 000001AC 5B                      	pop	bx
   165 000001AD 5D                      	pop	bp
   166 000001AE C3                      	ret
   167                                  
   168                                  
   169                                  SR_asuldiv:			; u1 /= u2
   170 000001AF 55                      	push	bp
   171 000001B0 89E5                    	mov	bp,sp
   172 000001B2 53                      	push	bx
   173 000001B3 8B5E04                  	mov	bx,[bp+4]	; Get address of u1	(was push3)
   174 000001B6 FF7608                  	push	word [bp+8]	; Push hi u2		(was push1)
   175 000001B9 FF7606                  	push	word [bp+6]	; Push lo u2		(was push2)
   176 000001BC FF7702                  	push	word [bx+2]	; Push hi u1
   177 000001BF FF37                    	push	word [bx]	; Push lo u1
   178 000001C1 E89F00                  	call	SR_uldiv
   179 000001C4 8B5E04                  	mov	bx,[bp+4]	; Restore u1 address
   180 000001C7 895702                  	mov	[bx+2],dx	; Store result
   181 000001CA 8907                    	mov	[bx],ax
   182 000001CC 5B                      	pop	bx
   183 000001CD 5D                      	pop	bp
   184 000001CE C3                      	ret
   185                                  SR_asilmod:			; u1 %= u2
   186 000001CF 55                      	push	bp
   187 000001D0 89E5                    	mov	bp,sp
   188 000001D2 53                      	push	bx
   189 000001D3 8B5E04                  	mov	bx,[bp+4]	; Get address of u1	(was push3)
   190 000001D6 FF7608                  	push	word [bp+8]	; Push hi u2		(was push1)
   191 000001D9 FF7606                  	push	word [bp+6]	; Push lo u2		(was push2)
   192 000001DC FF7702                  	push	word [bx+2]	; Push hi u1
   193 000001DF FF37                    	push	word [bx]	; Push lo u1
   194 000001E1 E89100                  	call	SR_ilmod
   195 000001E4 8B5E04                  	mov	bx,[bp+4]	; Restore u1 address
   196 000001E7 895702                  	mov	[bx+2],dx	; Store result
   197 000001EA 8907                    	mov	[bx],ax
   198 000001EC 5B                      	pop	bx
   199 000001ED 5D                      	pop	bp
   200 000001EE C3                      	ret
   201                                  SR_asulmul:			; u1 *= u2
   202 000001EF 55                      	push	bp
   203 000001F0 89E5                    	mov	bp,sp
   204 000001F2 53                      	push	bx
   205 000001F3 8B5E04                  	mov	bx,[bp+4]	; Get address of u1	(was push3)
   206 000001F6 FF7608                  	push	word [bp+8]	; Push hi u2		(was push1)
   207 000001F9 FF7606                  	push	word [bp+6]	; Push lo u2		(was push2)
   208 000001FC FF7702                  	push	word [bx+2]	; Push hi u1
   209 000001FF FF37                    	push	word [bx]	; Push lo u1
   210 00000201 E8A201                  	call	SR_ulmul
   211 00000204 81C40800                	add	sp,8
   212 00000208 8B5E04                  	mov	bx,[bp+4]	; Restore u1 address
   213 0000020B 895702                  	mov	[bx+2],dx	; Store result
   214 0000020E 8907                    	mov	[bx],ax
   215 00000210 5B                      	pop	bx
   216 00000211 5D                      	pop	bp
   217 00000212 C3                      	ret
   218                                  SR_asulshl:			; u1 << u2
   219 00000213 55                      	push	bp
   220 00000214 89E5                    	mov	bp,sp
   221 00000216 53                      	push	bx
   222 00000217 8B5E04                  	mov	bx,[bp+4]	; Get address of u1	(was push3)
   223 0000021A FF7608                  	push	word [bp+8]	; Push hi u2		(was push1)
   224 0000021D FF7606                  	push	word [bp+6]	; Push lo u2		(was push2)
   225 00000220 FF7702                  	push	word [bx+2]	; Push hi u1
   226 00000223 FF37                    	push	word [bx]	; Push lo u1
   227 00000225 E8E900                  	call	SR_ulshl
   228 00000228 81C40800                	add	sp,8
   229 0000022C 8B5E04                  	mov	bx,[bp+4]	; Restore u1 address
   230 0000022F 895702                  	mov	[bx+2],dx	; Store result
   231 00000232 8907                    	mov	[bx],ax
   232 00000234 5B                      	pop	bx
   233 00000235 5D                      	pop	bp
   234 00000236 C3                      	ret
   235                                  SR_asulshr:			; u1 >> u2
   236 00000237 55                      	push	bp
   237 00000238 89E5                    	mov	bp,sp
   238 0000023A 53                      	push	bx
   239 0000023B 8B5E04                  	mov	bx,[bp+4]	; Get address of u1	(was push3)
   240 0000023E FF7608                  	push	word [bp+8]	; Push hi u2		(was push1)
   241 00000241 FF7606                  	push	word [bp+6]	; Push lo u2		(was push2)
   242 00000244 FF7702                  	push	word [bx+2]	; Push hi u1
   243 00000247 FF37                    	push	word [bx]	; Push lo u1
   244 00000249 E82801                  	call	SR_ulshr
   245 0000024C 81C40800                	add	sp,8
   246 00000250 8B5E04                  	mov	bx,[bp+4]	; Restore u1 address
   247 00000253 895702                  	mov	[bx+2],dx	; Store result
   248 00000256 8907                    	mov	[bx],ax
   249 00000258 5B                      	pop	bx
   250 00000259 5D                      	pop	bp
   251 0000025A C3                      	ret
   252                                  
   253                                  
   254                                  ; Main 32-bit routines begin here:
   255                                  
   256                                  SR_ldiv:	; N_LDIV@
   257 0000025B 59                      	pop    cx
   258 0000025C 0E                      	push   cs
   259 0000025D 51                      	push   cx
   260                                  	; LDIV@
   261 0000025E 31C9                    	xor    cx,cx
   262 00000260 E91800                  	jmp    LSR_01
   263                                  SR_uldiv:	; N_LUDIV@
   264 00000263 59                      	pop    cx
   265 00000264 0E                      	push   cs
   266 00000265 51                      	push   cx
   267                                  	; F_LUDIV@
   268 00000266 B90100                  	mov    cx,0001
   269 00000269 E90F00                  	jmp    LSR_01
   270                                  SR_lmod:	; N_LMOD@
   271 0000026C 59                      	pop    cx
   272 0000026D 0E                      	push   cs
   273 0000026E 51                      	push   cx
   274                                  	; F_LMOD@
   275 0000026F B90200                  	mov    cx,0002
   276 00000272 E90600                  	jmp    LSR_01
   277                                  SR_ilmod:	; N_LUMOD@
   278 00000275 59                      	pop    cx
   279 00000276 0E                      	push   cs
   280 00000277 51                      	push   cx
   281                                  	; LUMOD@
   282 00000278 B90300                  	mov    cx,0003
   283                                  LSR_01:
   284 0000027B 55                      	push   bp
   285 0000027C 56                      	push   si
   286 0000027D 57                      	push   di
   287 0000027E 89E5                    	mov    bp,sp
   288 00000280 89CF                    	mov    di,cx
   289 00000282 8B460A                  	mov    ax,[bp+0Ah]
   290 00000285 8B560C                  	mov    dx,[bp+0Ch]
   291 00000288 8B5E0E                  	mov    bx,[bp+0Eh]
   292 0000028B 8B4E10                  	mov    cx,[bp+10h]
   293 0000028E 09C9                    	or     cx,cx
   294 00000290 7508                    	jne    LSR_02
   295 00000292 09D2                    	or     dx,dx
   296 00000294 746E                    	je     LSR_10
   297 00000296 09DB                    	or     bx,bx
   298 00000298 746A                    	je     LSR_10
   299                                  LSR_02:
   300 0000029A F7C70100                	test   di,0001
   301 0000029E 7520                    	jne    LSR_04
   302 000002A0 09D2                    	or     dx,dx
   303 000002A2 790C                    	jns    LSR_03
   304 000002A4 F7DA                    	neg    dx
   305 000002A6 F7D8                    	neg    ax
   306 000002A8 81DA0000                	sbb    dx,0000
   307 000002AC 81CF0C00                	or     di,000Ch
   308                                  LSR_03:
   309 000002B0 09C9                    	or     cx,cx
   310 000002B2 790C                    	jns    LSR_04
   311 000002B4 F7D9                    	neg    cx
   312 000002B6 F7DB                    	neg    bx
   313 000002B8 81D90000                	sbb    cx,0000
   314 000002BC 81F70400                	xor    di,0004
   315                                  LSR_04:
   316 000002C0 89CD                    	mov    bp,cx
   317 000002C2 B92000                  	mov    cx,0020h
   318 000002C5 57                      	push   di
   319 000002C6 31FF                    	xor    di,di
   320 000002C8 31F6                    	xor    si,si
   321                                  LSR_05:
   322 000002CA D1E0                    	shl    ax,1
   323 000002CC D1D2                    	rcl    dx,1
   324 000002CE D1D6                    	rcl    si,1
   325 000002D0 D1D7                    	rcl    di,1
   326 000002D2 39EF                    	cmp    di,bp
   327 000002D4 720B                    	jb     LSR_07
   328 000002D6 7704                    	ja     LSR_06
   329 000002D8 39DE                    	cmp    si,bx
   330 000002DA 7205                    	jb     LSR_07
   331                                  LSR_06:
   332 000002DC 29DE                    	sub    si,bx
   333 000002DE 19EF                    	sbb    di,bp
   334 000002E0 40                      	inc    ax
   335                                  LSR_07:
   336 000002E1 E2E7                    	loop   LSR_05
   337 000002E3 5B                      	pop    bx
   338 000002E4 F7C30200                	test   bx,0002
   339 000002E8 7406                    	je     LSR_08
   340 000002EA 89F0                    	mov    ax,si
   341 000002EC 89FA                    	mov    dx,di
   342 000002EE D1EB                    	shr    bx,1
   343                                  LSR_08:
   344 000002F0 F7C30400                	test   bx,0004h
   345 000002F4 7408                    	je     LSR_09
   346 000002F6 F7DA                    	neg    dx
   347 000002F8 F7D8                    	neg    ax
   348 000002FA 81DA0000                	sbb    dx,0000
   349                                  LSR_09:
   350 000002FE 5F                      	pop    di
   351 000002FF 5E                      	pop    si
   352 00000300 5D                      	pop    bp
   353 00000301 CA0800                  	retf   0008
   354                                  LSR_10:
   355 00000304 F7F3                    	div    bx
   356 00000306 F7C70200                	test   di,0002
   357 0000030A 7401                    	je     LSR_11
   358 0000030C 92                      	xchg   dx,ax
   359                                  LSR_11:
   360 0000030D 31D2                    	xor    dx,dx
   361 0000030F EBED                    	jmp    LSR_09
   362                                  SR_lshl:	; N_LXLSH@
   363                                  SR_ulshl:
   364                                  	; r = a << b
   365 00000311 5B                      	pop    bx
   366 00000312 0E                      	push   cs
   367 00000313 53                      	push   bx
   368                                  
   369 00000314 55                      	push   bp
   370 00000315 89E5                    	mov    bp,sp
   371                                  
   372 00000317 51                      	push   cx	; C86 doesn't expect use of cx or bx
   373                                  
   374 00000318 8B4606                  	mov    ax, [bp+6]	; pop loword(a)
   375 0000031B 8B5608                  	mov    dx, [bp+8]	; pop hiword(a)
   376 0000031E 8B4E0A                  	mov    cx, [bp+10]	; pop word(b)
   377                                  	
   378                                  	; LXLSH@
   379 00000321 80F910                  	cmp    cl,10h
   380 00000324 7312                    	jnb    LSR_12
   381 00000326 89C3                    	mov    bx,ax
   382 00000328 D3E0                    	shl    ax,cl
   383 0000032A D3E2                    	shl    dx,cl
   384 0000032C F6D9                    	neg    cl
   385 0000032E 80C110                  	add    cl,10h
   386 00000331 D3EB                    	shr    bx,cl
   387 00000333 09DA                    	or     dx,bx
   388 00000335 59                      	pop    cx
   389 00000336 5D                      	pop    bp
   390 00000337 CB                      	retf
   391                                  LSR_12:
   392 00000338 80E910                  	sub    cl,10h
   393 0000033B 92                      	xchg   dx,ax
   394 0000033C 31C0                    	xor    ax,ax
   395 0000033E D3E2                    	shl    dx,cl
   396 00000340 59                      	pop    cx
   397 00000341 5D                      	pop    bp
   398 00000342 CB                      	retf
   399                                  SR_lshr:	; N_LXRSH@
   400                                  	; r = a >> b
   401 00000343 5B                      	pop    bx
   402 00000344 0E                      	push   cs
   403 00000345 53                      	push   bx
   404                                  
   405 00000346 55                      	push   bp
   406 00000347 89E5                    	mov    bp,sp
   407                                  
   408 00000349 51                      	push   cx	; C86 doesn't expect use of cx or bx
   409                                  
   410 0000034A 8B4606                          mov    ax, [bp+6]	; pop loword(a)
   411 0000034D 8B5608                  	mov    dx, [bp+8]	; pop hiword(a)
   412 00000350 8B4E0A                  	mov    cx, [bp+10]	; pop word(b)
   413                                  	
   414                                  	; LXRSH@
   415 00000353 80F910                  	cmp    cl,10h
   416 00000356 7312                    	jnb    LSR_13
   417 00000358 89D3                    	mov    bx,dx
   418 0000035A D3E8                    	shr    ax,cl
   419 0000035C D3FA                    	sar    dx,cl
   420 0000035E F6D9                    	neg    cl
   421 00000360 80C110                  	add    cl,10h
   422 00000363 D3E3                    	shl    bx,cl
   423 00000365 09D8                    	or     ax,bx
   424 00000367 59                      	pop    cx
   425 00000368 5D                      	pop    bp
   426 00000369 CB                      	retf
   427                                  LSR_13:
   428 0000036A 80E910                  	sub    cl,10h
   429 0000036D 92                      	xchg   dx,ax
   430 0000036E 99                      	cwd
   431 0000036F D3F8                    	sar    ax,cl
   432 00000371 59                      	pop    cx
   433 00000372 5D                      	pop    bp
   434 00000373 CB                      	retf
   435                                  SR_ulshr:	; N_LXURSH@
   436                                  	; r = a >> b
   437 00000374 5B                      	pop    bx
   438 00000375 0E                      	push   cs
   439 00000376 53                      	push   bx
   440                                  
   441 00000377 55                      	push   bp
   442 00000378 89E5                    	mov    bp,sp
   443                                  
   444 0000037A 51                      	push   cx	; C86 doesn't expect use of cx or bx
   445                                  
   446 0000037B 8B4606                          mov    ax, [bp+6]	; pop loword(a)
   447 0000037E 8B5608                  	mov    dx, [bp+8]	; pop hiword(a)
   448 00000381 8B4E0A                  	mov    cx, [bp+10]	; pop word(b)
   449                                  	
   450                                  	; LXURSH@
   451 00000384 80F910                  	cmp    cl,10h
   452 00000387 7312                    	jnb    LSR_14
   453 00000389 89D3                    	mov    bx,dx
   454 0000038B D3E8                    	shr    ax,cl
   455 0000038D D3EA                    	shr    dx,cl
   456 0000038F F6D9                    	neg    cl
   457 00000391 80C110                  	add    cl,10h
   458 00000394 D3E3                    	shl    bx,cl
   459 00000396 09D8                    	or     ax,bx
   460 00000398 59                      	pop    cx
   461 00000399 5D                      	pop    bp
   462 0000039A CB                      	retf
   463                                  LSR_14:
   464 0000039B 80E910                  	sub    cl,10h
   465 0000039E 92                      	xchg   dx,ax
   466 0000039F 31D2                    	xor    dx,dx
   467 000003A1 D3E8                    	shr    ax,cl
   468 000003A3 59                      	pop    cx
   469 000003A4 5D                      	pop    bp
   470 000003A5 CB                      	retf
   471                                  SR_lmul:	; N_LXMUL@
   472                                  SR_ulmul:
   473                                  	; r = a * b
   474 000003A6 55                      	push   bp
   475 000003A7 56                      	push   si
   476 000003A8 89E5                    	mov    bp,sp
   477                                  
   478 000003AA 51                      	push   cx	; C86 doesn't expect use of cx or bx
   479 000003AB 53                      	push   bx
   480                                  
   481 000003AC 8B5E06                          mov    bx, [bp+6]	; pop loword(a)
   482 000003AF 8B4E08                  	mov    cx, [bp+8]	; pop hiword(a)
   483 000003B2 8B460A                  	mov    ax, [bp+10]	; pop loword(b)
   484 000003B5 8B560C                  	mov    dx, [bp+12]	; pop hiword(b)
   485                                  	
   486 000003B8 96                      	xchg   si,ax
   487 000003B9 92                      	xchg   dx,ax
   488 000003BA 85C0                    	test   ax,ax
   489 000003BC 7402                    	je     LSR_15
   490 000003BE F7E3                    	mul    bx
   491                                  LSR_15:
   492 000003C0 E305                    	jcxz   LSR_16
   493 000003C2 91                      	xchg   cx,ax
   494 000003C3 F7E6                    	mul    si
   495 000003C5 01C8                    	add    ax,cx
   496                                  LSR_16:
   497 000003C7 96                      	xchg   si,ax
   498 000003C8 F7E3                    	mul    bx
   499 000003CA 01F2                    	add    dx,si
   500 000003CC 5B                      	pop    bx
   501 000003CD 59                      	pop    cx
   502 000003CE 5E                      	pop    si
   503 000003CF 5D                      	pop    bp
   504 000003D0 C3                      	ret
   505                                  
   506                                  ; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
   507                                  	CPU	8086
   508 000003D1 90                      	ALIGN	2
   509 000003D2 E95705                  	jmp	main	; Jump to program start
   510                                  new_line:
   511 000003D5 0D0A24                  	db	13,10,36
   512                                  	ALIGN	2
   513                                  signalEOI:
   514 000003D8 E90800                  	jmp	L_clib_1
   515                                  L_clib_2:
   516 000003DB B020                    	mov	al, 0x20
   517 000003DD E620                    	out	0x20, al
   518 000003DF 89EC                    	mov	sp, bp
   519 000003E1 5D                      	pop	bp
   520 000003E2 C3                      	ret
   521                                  L_clib_1:
   522 000003E3 55                      	push	bp
   523 000003E4 89E5                    	mov	bp, sp
   524 000003E6 EBF3                    	jmp	L_clib_2
   525                                  	ALIGN	2
   526                                  exit:
   527 000003E8 E90B00                  	jmp	L_clib_4
   528                                  L_clib_5:
   529 000003EB B44C                    	mov	ah, 4Ch
   530 000003ED 8A4604                  	mov	al, [bp+4]
   531 000003F0 CD21                    	int	21h
   532 000003F2 89EC                    	mov	sp, bp
   533 000003F4 5D                      	pop	bp
   534 000003F5 C3                      	ret
   535                                  L_clib_4:
   536 000003F6 55                      	push	bp
   537 000003F7 89E5                    	mov	bp, sp
   538 000003F9 EBF0                    	jmp	L_clib_5
   539 000003FB 90                      	ALIGN	2
   540                                  print:
   541 000003FC E91100                  	jmp	L_clib_7
   542                                  L_clib_8:
   543 000003FF B440                    	mov	ah, 40h
   544 00000401 BB0100                  	mov	bx, 1
   545 00000404 8B4E06                  	mov	cx, [bp+6]
   546 00000407 8B5604                  	mov	dx, [bp+4]
   547 0000040A CD21                    	int	21h
   548 0000040C 89EC                    	mov	sp, bp
   549 0000040E 5D                      	pop	bp
   550 0000040F C3                      	ret
   551                                  L_clib_7:
   552 00000410 55                      	push	bp
   553 00000411 89E5                    	mov	bp, sp
   554 00000413 EBEA                    	jmp	L_clib_8
   555 00000415 90                      	ALIGN	2
   556                                  printChar:
   557 00000416 E90B00                  	jmp	L_clib_10
   558                                  L_clib_11:
   559 00000419 B402                    	mov	ah, 2
   560 0000041B 8A5604                  	mov	dl, [bp+4]
   561 0000041E CD21                    	int	21h
   562 00000420 89EC                    	mov	sp, bp
   563 00000422 5D                      	pop	bp
   564 00000423 C3                      	ret
   565                                  L_clib_10:
   566 00000424 55                      	push	bp
   567 00000425 89E5                    	mov	bp, sp
   568 00000427 EBF0                    	jmp	L_clib_11
   569 00000429 90                      	ALIGN	2
   570                                  printNewLine:
   571 0000042A E90B00                  	jmp	L_clib_13
   572                                  L_clib_14:
   573 0000042D B409                    	mov	ah, 9
   574 0000042F BA[D503]                	mov	dx, new_line
   575 00000432 CD21                    	int	21h
   576 00000434 89EC                    	mov	sp, bp
   577 00000436 5D                      	pop	bp
   578 00000437 C3                      	ret
   579                                  L_clib_13:
   580 00000438 55                      	push	bp
   581 00000439 89E5                    	mov	bp, sp
   582 0000043B EBF0                    	jmp	L_clib_14
   583 0000043D 90                      	ALIGN	2
   584                                  printString:
   585 0000043E E91D00                  	jmp	L_clib_16
   586                                  L_clib_17:
   587 00000441 31F6                    	xor	si,si
   588 00000443 8B5E04                  	mov	bx, [bp+4]
   589 00000446 E90100                  	jmp	printString2
   590                                  	printString1:
   591 00000449 46                      	inc	si
   592                                  	printString2:
   593 0000044A 803800                  	cmp	byte [bx+si],0
   594 0000044D 75FA                    	jne	printString1
   595 0000044F 89DA                    	mov	dx, bx
   596 00000451 89F1                    	mov	cx, si
   597 00000453 B440                    	mov	ah, 40h
   598 00000455 BB0100                  	mov	bx, 1
   599 00000458 CD21                    	int	21h
   600 0000045A 89EC                    	mov	sp, bp
   601 0000045C 5D                      	pop	bp
   602 0000045D C3                      	ret
   603                                  L_clib_16:
   604 0000045E 55                      	push	bp
   605 0000045F 89E5                    	mov	bp, sp
   606 00000461 51                      	push	cx
   607 00000462 EBDD                    	jmp	L_clib_17
   608                                  	ALIGN	2
   609                                  printInt:
   610 00000464 E99B00                  	jmp	L_clib_19
   611                                  L_clib_20:
   612 00000467 C746FE0000              	mov	word [bp-2], 0
   613 0000046C C746FC1027              	mov	word [bp-4], 10000
   614 00000471 817E040000              	cmp	word [bp+4], 0
   615 00000476 7D0F                    	jge	L_clib_21
   616 00000478 C646F62D                	mov	byte [bp-10], 45
   617 0000047C FF46FE                  	inc	word [bp-2]
   618 0000047F 8B4604                  	mov	ax, word [bp+4]
   619 00000482 F7D8                    	neg	ax
   620 00000484 894604                  	mov	word [bp+4], ax
   621                                  L_clib_21:
   622 00000487 8B4604                  	mov	ax, word [bp+4]
   623 0000048A 85C0                    	test	ax, ax
   624 0000048C 7508                    	jne	L_clib_22
   625 0000048E C746FC0100              	mov	word [bp-4], 1
   626 00000493 E91A00                  	jmp	L_clib_23
   627                                  L_clib_22:
   628 00000496 E90C00                  	jmp	L_clib_25
   629                                  L_clib_24:
   630 00000499 8B46FC                  	mov	ax, word [bp-4]
   631 0000049C 99                      	cwd
   632 0000049D B90A00                  	mov	cx, 10
   633 000004A0 F7F9                    	idiv	cx
   634 000004A2 8946FC                  	mov	word [bp-4], ax
   635                                  L_clib_25:
   636 000004A5 8B4604                  	mov	ax, word [bp+4]
   637 000004A8 99                      	cwd
   638 000004A9 F77EFC                  	idiv	word [bp-4]
   639 000004AC 85C0                    	test	ax, ax
   640 000004AE 74E9                    	je	L_clib_24
   641                                  L_clib_26:
   642                                  L_clib_23:
   643 000004B0 E93600                  	jmp	L_clib_28
   644                                  L_clib_27:
   645 000004B3 8B4604                  	mov	ax, word [bp+4]
   646 000004B6 31D2                    	xor	dx, dx
   647 000004B8 F776FC                  	div	word [bp-4]
   648 000004BB 0430                    	add	al, 48
   649 000004BD 8B76FE                  	mov	si, word [bp-2]
   650 000004C0 8D56F6                  	lea	dx, [bp-10]
   651 000004C3 01D6                    	add	si, dx
   652 000004C5 8804                    	mov	byte [si], al
   653 000004C7 FF46FE                  	inc	word [bp-2]
   654 000004CA 8B4604                  	mov	ax, word [bp+4]
   655 000004CD 31D2                    	xor	dx, dx
   656 000004CF F776FC                  	div	word [bp-4]
   657 000004D2 89D0                    	mov	ax, dx
   658 000004D4 894604                  	mov	word [bp+4], ax
   659 000004D7 8B46FC                  	mov	ax, word [bp-4]
   660 000004DA 99                      	cwd
   661 000004DB B90A00                  	mov	cx, 10
   662 000004DE F7F9                    	idiv	cx
   663 000004E0 8946FC                  	mov	word [bp-4], ax
   664 000004E3 8B46FC                  	mov	ax, word [bp-4]
   665 000004E6 8946FC                  	mov	word [bp-4], ax
   666                                  L_clib_28:
   667 000004E9 817EFC0000              	cmp	word [bp-4], 0
   668 000004EE 7FC3                    	jg	L_clib_27
   669                                  L_clib_29:
   670 000004F0 FF76FE                  	push	word [bp-2]
   671 000004F3 8D46F6                  	lea	ax, [bp-10]
   672 000004F6 50                      	push	ax
   673 000004F7 E802FF                  	call	print
   674 000004FA 81C40400                	add	sp, 4
   675 000004FE 89EC                    	mov	sp, bp
   676 00000500 5D                      	pop	bp
   677 00000501 C3                      	ret
   678                                  L_clib_19:
   679 00000502 55                      	push	bp
   680 00000503 89E5                    	mov	bp, sp
   681 00000505 81EC0A00                	sub	sp, 10
   682 00000509 E95BFF                  	jmp	L_clib_20
   683                                  	ALIGN	2
   684                                  printLong:
   685 0000050C E9DB00                  	jmp	L_clib_31
   686                                  L_clib_32:
   687 0000050F C746FE0000              	mov	word [bp-2], 0
   688 00000514 C746FA00CA              	mov	word [bp-6], 51712
   689 00000519 C746FC9A3B              	mov	word [bp-4], 15258
   690 0000051E 817E060000              	cmp	word [bp+6], 0
   691 00000523 7F24                    	jg	L_clib_33
   692 00000525 7C07                    	jl	L_clib_34
   693 00000527 817E040000              	cmp	word [bp+4], 0
   694 0000052C 731B                    	jae	L_clib_33
   695                                  L_clib_34:
   696 0000052E C646EF2D                	mov	byte [bp-17], 45
   697 00000532 FF46FE                  	inc	word [bp-2]
   698 00000535 8B4604                  	mov	ax, word [bp+4]
   699 00000538 8B5606                  	mov	dx, word [bp+6]
   700 0000053B F7D8                    	neg	ax
   701 0000053D 81D20000                	adc	dx, 0
   702 00000541 F7DA                    	neg	dx
   703 00000543 894604                  	mov	word [bp+4], ax
   704 00000546 895606                  	mov	word [bp+6], dx
   705                                  L_clib_33:
   706 00000549 8B4604                  	mov	ax, word [bp+4]
   707 0000054C 8B5606                  	mov	dx, word [bp+6]
   708 0000054F 09C2                    	or	dx, ax
   709 00000551 750D                    	jne	L_clib_35
   710 00000553 C746FA0100              	mov	word [bp-6], 1
   711 00000558 C746FC0000              	mov	word [bp-4], 0
   712 0000055D E92400                  	jmp	L_clib_36
   713                                  L_clib_35:
   714 00000560 E90E00                  	jmp	L_clib_38
   715                                  L_clib_37:
   716 00000563 B80A00                  	mov	ax, 10
   717 00000566 31D2                    	xor	dx, dx
   718 00000568 52                      	push	dx
   719 00000569 50                      	push	ax
   720 0000056A 8D46FA                  	lea	ax, [bp-6]
   721 0000056D 50                      	push	ax
   722 0000056E E892FB                  	call	SR_asldiv
   723                                  L_clib_38:
   724 00000571 FF76FC                  	push	word [bp-4]
   725 00000574 FF76FA                  	push	word [bp-6]
   726 00000577 FF7606                  	push	word [bp+6]
   727 0000057A FF7604                  	push	word [bp+4]
   728 0000057D E8DBFC                  	call	SR_ldiv
   729 00000580 09C2                    	or	dx, ax
   730 00000582 74DF                    	je	L_clib_37
   731                                  L_clib_39:
   732                                  L_clib_36:
   733 00000584 E94100                  	jmp	L_clib_41
   734                                  L_clib_40:
   735 00000587 FF76FC                  	push	word [bp-4]
   736 0000058A FF76FA                  	push	word [bp-6]
   737 0000058D FF7606                  	push	word [bp+6]
   738 00000590 FF7604                  	push	word [bp+4]
   739 00000593 E8CDFC                  	call	SR_uldiv
   740 00000596 0430                    	add	al, 48
   741 00000598 8B76FE                  	mov	si, word [bp-2]
   742 0000059B 8D56EF                  	lea	dx, [bp-17]
   743 0000059E 01D6                    	add	si, dx
   744 000005A0 8804                    	mov	byte [si], al
   745 000005A2 FF46FE                  	inc	word [bp-2]
   746 000005A5 FF76FC                  	push	word [bp-4]
   747 000005A8 FF76FA                  	push	word [bp-6]
   748 000005AB FF7606                  	push	word [bp+6]
   749 000005AE FF7604                  	push	word [bp+4]
   750 000005B1 E8B8FC                  	call	SR_lmod
   751 000005B4 894604                  	mov	word [bp+4], ax
   752 000005B7 895606                  	mov	word [bp+6], dx
   753 000005BA B80A00                  	mov	ax, 10
   754 000005BD 31D2                    	xor	dx, dx
   755 000005BF 52                      	push	dx
   756 000005C0 50                      	push	ax
   757 000005C1 8D46FA                  	lea	ax, [bp-6]
   758 000005C4 50                      	push	ax
   759 000005C5 E83BFB                  	call	SR_asldiv
   760                                  L_clib_41:
   761 000005C8 817EFC0000              	cmp	word [bp-4], 0
   762 000005CD 7FB8                    	jg	L_clib_40
   763 000005CF 7507                    	jne	L_clib_43
   764 000005D1 817EFA0000              	cmp	word [bp-6], 0
   765 000005D6 77AF                    	ja	L_clib_40
   766                                  L_clib_43:
   767                                  L_clib_42:
   768 000005D8 FF76FE                  	push	word [bp-2]
   769 000005DB 8D46EF                  	lea	ax, [bp-17]
   770 000005DE 50                      	push	ax
   771 000005DF E81AFE                  	call	print
   772 000005E2 81C40400                	add	sp, 4
   773 000005E6 89EC                    	mov	sp, bp
   774 000005E8 5D                      	pop	bp
   775 000005E9 C3                      	ret
   776                                  L_clib_31:
   777 000005EA 55                      	push	bp
   778 000005EB 89E5                    	mov	bp, sp
   779 000005ED 81EC1200                	sub	sp, 18
   780 000005F1 E91BFF                  	jmp	L_clib_32
   781                                  	ALIGN	2
   782                                  printUInt:
   783 000005F4 E98000                  	jmp	L_clib_45
   784                                  L_clib_46:
   785 000005F7 C746FE0000              	mov	word [bp-2], 0
   786 000005FC C746FC1027              	mov	word [bp-4], 10000
   787 00000601 8B4604                  	mov	ax, word [bp+4]
   788 00000604 85C0                    	test	ax, ax
   789 00000606 7508                    	jne	L_clib_47
   790 00000608 C746FC0100              	mov	word [bp-4], 1
   791 0000060D E91C00                  	jmp	L_clib_48
   792                                  L_clib_47:
   793 00000610 E90D00                  	jmp	L_clib_50
   794                                  L_clib_49:
   795 00000613 8B46FC                  	mov	ax, word [bp-4]
   796 00000616 31D2                    	xor	dx, dx
   797 00000618 B90A00                  	mov	cx, 10
   798 0000061B F7F1                    	div	cx
   799 0000061D 8946FC                  	mov	word [bp-4], ax
   800                                  L_clib_50:
   801 00000620 8B4604                  	mov	ax, word [bp+4]
   802 00000623 31D2                    	xor	dx, dx
   803 00000625 F776FC                  	div	word [bp-4]
   804 00000628 85C0                    	test	ax, ax
   805 0000062A 74E7                    	je	L_clib_49
   806                                  L_clib_51:
   807                                  L_clib_48:
   808 0000062C E92F00                  	jmp	L_clib_53
   809                                  L_clib_52:
   810 0000062F 8B4604                  	mov	ax, word [bp+4]
   811 00000632 31D2                    	xor	dx, dx
   812 00000634 F776FC                  	div	word [bp-4]
   813 00000637 0430                    	add	al, 48
   814 00000639 8B76FE                  	mov	si, word [bp-2]
   815 0000063C 8D56F6                  	lea	dx, [bp-10]
   816 0000063F 01D6                    	add	si, dx
   817 00000641 8804                    	mov	byte [si], al
   818 00000643 FF46FE                  	inc	word [bp-2]
   819 00000646 8B4604                  	mov	ax, word [bp+4]
   820 00000649 31D2                    	xor	dx, dx
   821 0000064B F776FC                  	div	word [bp-4]
   822 0000064E 895604                  	mov	word [bp+4], dx
   823 00000651 8B46FC                  	mov	ax, word [bp-4]
   824 00000654 31D2                    	xor	dx, dx
   825 00000656 B90A00                  	mov	cx, 10
   826 00000659 F7F1                    	div	cx
   827 0000065B 8946FC                  	mov	word [bp-4], ax
   828                                  L_clib_53:
   829 0000065E 8B46FC                  	mov	ax, word [bp-4]
   830 00000661 85C0                    	test	ax, ax
   831 00000663 75CA                    	jne	L_clib_52
   832                                  L_clib_54:
   833 00000665 FF76FE                  	push	word [bp-2]
   834 00000668 8D46F6                  	lea	ax, [bp-10]
   835 0000066B 50                      	push	ax
   836 0000066C E88DFD                  	call	print
   837 0000066F 81C40400                	add	sp, 4
   838 00000673 89EC                    	mov	sp, bp
   839 00000675 5D                      	pop	bp
   840 00000676 C3                      	ret
   841                                  L_clib_45:
   842 00000677 55                      	push	bp
   843 00000678 89E5                    	mov	bp, sp
   844 0000067A 81EC0A00                	sub	sp, 10
   845 0000067E E976FF                  	jmp	L_clib_46
   846 00000681 90                      	ALIGN	2
   847                                  printULong:
   848 00000682 E9A200                  	jmp	L_clib_56
   849                                  L_clib_57:
   850 00000685 C746FE0000              	mov	word [bp-2], 0
   851 0000068A C746FA00CA              	mov	word [bp-6], 51712
   852 0000068F C746FC9A3B              	mov	word [bp-4], 15258
   853 00000694 8B4604                  	mov	ax, word [bp+4]
   854 00000697 8B5606                  	mov	dx, word [bp+6]
   855 0000069A 09C2                    	or	dx, ax
   856 0000069C 750D                    	jne	L_clib_58
   857 0000069E C746FA0100              	mov	word [bp-6], 1
   858 000006A3 C746FC0000              	mov	word [bp-4], 0
   859 000006A8 E92400                  	jmp	L_clib_59
   860                                  L_clib_58:
   861 000006AB E90E00                  	jmp	L_clib_61
   862                                  L_clib_60:
   863 000006AE B80A00                  	mov	ax, 10
   864 000006B1 31D2                    	xor	dx, dx
   865 000006B3 52                      	push	dx
   866 000006B4 50                      	push	ax
   867 000006B5 8D46FA                  	lea	ax, [bp-6]
   868 000006B8 50                      	push	ax
   869 000006B9 E8F3FA                  	call	SR_asuldiv
   870                                  L_clib_61:
   871 000006BC FF76FC                  	push	word [bp-4]
   872 000006BF FF76FA                  	push	word [bp-6]
   873 000006C2 FF7606                  	push	word [bp+6]
   874 000006C5 FF7604                  	push	word [bp+4]
   875 000006C8 E898FB                  	call	SR_uldiv
   876 000006CB 09C2                    	or	dx, ax
   877 000006CD 74DF                    	je	L_clib_60
   878                                  L_clib_62:
   879                                  L_clib_59:
   880 000006CF E93900                  	jmp	L_clib_64
   881                                  L_clib_63:
   882 000006D2 FF76FC                  	push	word [bp-4]
   883 000006D5 FF76FA                  	push	word [bp-6]
   884 000006D8 FF7606                  	push	word [bp+6]
   885 000006DB FF7604                  	push	word [bp+4]
   886 000006DE E882FB                  	call	SR_uldiv
   887 000006E1 0430                    	add	al, 48
   888 000006E3 8B76FE                  	mov	si, word [bp-2]
   889 000006E6 8D56EF                  	lea	dx, [bp-17]
   890 000006E9 01D6                    	add	si, dx
   891 000006EB 8804                    	mov	byte [si], al
   892 000006ED FF46FE                  	inc	word [bp-2]
   893 000006F0 FF76FC                  	push	word [bp-4]
   894 000006F3 FF76FA                  	push	word [bp-6]
   895 000006F6 8D4604                  	lea	ax, [bp+4]
   896 000006F9 50                      	push	ax
   897 000006FA E8D2FA                  	call	SR_asilmod
   898 000006FD B80A00                  	mov	ax, 10
   899 00000700 31D2                    	xor	dx, dx
   900 00000702 52                      	push	dx
   901 00000703 50                      	push	ax
   902 00000704 8D46FA                  	lea	ax, [bp-6]
   903 00000707 50                      	push	ax
   904 00000708 E8A4FA                  	call	SR_asuldiv
   905                                  L_clib_64:
   906 0000070B 8B46FA                  	mov	ax, word [bp-6]
   907 0000070E 8B56FC                  	mov	dx, word [bp-4]
   908 00000711 09C2                    	or	dx, ax
   909 00000713 75BD                    	jne	L_clib_63
   910                                  L_clib_65:
   911 00000715 FF76FE                  	push	word [bp-2]
   912 00000718 8D46EF                  	lea	ax, [bp-17]
   913 0000071B 50                      	push	ax
   914 0000071C E8DDFC                  	call	print
   915 0000071F 81C40400                	add	sp, 4
   916 00000723 89EC                    	mov	sp, bp
   917 00000725 5D                      	pop	bp
   918 00000726 C3                      	ret
   919                                  L_clib_56:
   920 00000727 55                      	push	bp
   921 00000728 89E5                    	mov	bp, sp
   922 0000072A 81EC1200                	sub	sp, 18
   923 0000072E E954FF                  	jmp	L_clib_57
   924 00000731 90                      	ALIGN	2
   925                                  printByte:
   926 00000732 E96400                  	jmp	L_clib_67
   927                                  L_clib_68:
   928 00000735 8A4604                  	mov	al, byte [bp+4]
   929 00000738 98                      	cbw
   930 00000739 B90400                  	mov	cx, 4
   931 0000073C D3F8                    	sar	ax, cl
   932 0000073E 250F00                  	and	ax, 15
   933 00000741 8846FF                  	mov	byte [bp-1], al
   934 00000744 807EFF09                	cmp	byte [bp-1], 9
   935 00000748 7E0D                    	jle	L_clib_69
   936 0000074A 8A46FF                  	mov	al, byte [bp-1]
   937 0000074D 98                      	cbw
   938 0000074E 2D0A00                  	sub	ax, 10
   939 00000751 054100                  	add	ax, 65
   940 00000754 E90700                  	jmp	L_clib_70
   941                                  L_clib_69:
   942 00000757 8A46FF                  	mov	al, byte [bp-1]
   943 0000075A 98                      	cbw
   944 0000075B 053000                  	add	ax, 48
   945                                  L_clib_70:
   946 0000075E 8846FD                  	mov	byte [bp-3], al
   947 00000761 8A4604                  	mov	al, byte [bp+4]
   948 00000764 240F                    	and	al, 15
   949 00000766 8846FF                  	mov	byte [bp-1], al
   950 00000769 807EFF09                	cmp	byte [bp-1], 9
   951 0000076D 7E0D                    	jle	L_clib_71
   952 0000076F 8A46FF                  	mov	al, byte [bp-1]
   953 00000772 98                      	cbw
   954 00000773 2D0A00                  	sub	ax, 10
   955 00000776 054100                  	add	ax, 65
   956 00000779 E90700                  	jmp	L_clib_72
   957                                  L_clib_71:
   958 0000077C 8A46FF                  	mov	al, byte [bp-1]
   959 0000077F 98                      	cbw
   960 00000780 053000                  	add	ax, 48
   961                                  L_clib_72:
   962 00000783 8846FE                  	mov	byte [bp-2], al
   963 00000786 B80200                  	mov	ax, 2
   964 00000789 50                      	push	ax
   965 0000078A 8D46FD                  	lea	ax, [bp-3]
   966 0000078D 50                      	push	ax
   967 0000078E E86BFC                  	call	print
   968 00000791 81C40400                	add	sp, 4
   969 00000795 89EC                    	mov	sp, bp
   970 00000797 5D                      	pop	bp
   971 00000798 C3                      	ret
   972                                  L_clib_67:
   973 00000799 55                      	push	bp
   974 0000079A 89E5                    	mov	bp, sp
   975 0000079C 81EC0400                	sub	sp, 4
   976 000007A0 EB93                    	jmp	L_clib_68
   977                                  	ALIGN	2
   978                                  printWord:
   979 000007A2 E95D00                  	jmp	L_clib_74
   980                                  L_clib_75:
   981 000007A5 C746FE0300              	mov	word [bp-2], 3
   982 000007AA E93B00                  	jmp	L_clib_77
   983                                  L_clib_76:
   984 000007AD 8B4604                  	mov	ax, word [bp+4]
   985 000007B0 250F00                  	and	ax, 15
   986 000007B3 8846FD                  	mov	byte [bp-3], al
   987 000007B6 807EFD09                	cmp	byte [bp-3], 9
   988 000007BA 7E0D                    	jle	L_clib_80
   989 000007BC 8A46FD                  	mov	al, byte [bp-3]
   990 000007BF 98                      	cbw
   991 000007C0 2D0A00                  	sub	ax, 10
   992 000007C3 054100                  	add	ax, 65
   993 000007C6 E90700                  	jmp	L_clib_81
   994                                  L_clib_80:
   995 000007C9 8A46FD                  	mov	al, byte [bp-3]
   996 000007CC 98                      	cbw
   997 000007CD 053000                  	add	ax, 48
   998                                  L_clib_81:
   999 000007D0 8B76FE                  	mov	si, word [bp-2]
  1000 000007D3 8D56F9                  	lea	dx, [bp-7]
  1001 000007D6 01D6                    	add	si, dx
  1002 000007D8 8804                    	mov	byte [si], al
  1003 000007DA 8B4604                  	mov	ax, word [bp+4]
  1004 000007DD B90400                  	mov	cx, 4
  1005 000007E0 D3F8                    	sar	ax, cl
  1006 000007E2 894604                  	mov	word [bp+4], ax
  1007                                  L_clib_79:
  1008 000007E5 FF4EFE                  	dec	word [bp-2]
  1009                                  L_clib_77:
  1010 000007E8 817EFE0000              	cmp	word [bp-2], 0
  1011 000007ED 7DBE                    	jge	L_clib_76
  1012                                  L_clib_78:
  1013 000007EF B80400                  	mov	ax, 4
  1014 000007F2 50                      	push	ax
  1015 000007F3 8D46F9                  	lea	ax, [bp-7]
  1016 000007F6 50                      	push	ax
  1017 000007F7 E802FC                  	call	print
  1018 000007FA 81C40400                	add	sp, 4
  1019 000007FE 89EC                    	mov	sp, bp
  1020 00000800 5D                      	pop	bp
  1021 00000801 C3                      	ret
  1022                                  L_clib_74:
  1023 00000802 55                      	push	bp
  1024 00000803 89E5                    	mov	bp, sp
  1025 00000805 81EC0800                	sub	sp, 8
  1026 00000809 EB9A                    	jmp	L_clib_75
  1027 0000080B 90                      	ALIGN	2
  1028                                  printDWord:
  1029 0000080C E9B300                  	jmp	L_clib_83
  1030                                  L_clib_84:
  1031 0000080F 8D4604                  	lea	ax, [bp+4]
  1032 00000812 89C6                    	mov	si, ax
  1033 00000814 8B04                    	mov	ax, word [si]
  1034 00000816 8946FA                  	mov	word [bp-6], ax
  1035 00000819 8D4604                  	lea	ax, [bp+4]
  1036 0000081C 89C6                    	mov	si, ax
  1037 0000081E 81C60200                	add	si, 2
  1038 00000822 8B04                    	mov	ax, word [si]
  1039 00000824 8946F8                  	mov	word [bp-8], ax
  1040 00000827 C746FE0300              	mov	word [bp-2], 3
  1041 0000082C E97900                  	jmp	L_clib_86
  1042                                  L_clib_85:
  1043 0000082F 8B46FA                  	mov	ax, word [bp-6]
  1044 00000832 250F00                  	and	ax, 15
  1045 00000835 8846FD                  	mov	byte [bp-3], al
  1046 00000838 807EFD09                	cmp	byte [bp-3], 9
  1047 0000083C 7E0D                    	jle	L_clib_89
  1048 0000083E 8A46FD                  	mov	al, byte [bp-3]
  1049 00000841 98                      	cbw
  1050 00000842 2D0A00                  	sub	ax, 10
  1051 00000845 054100                  	add	ax, 65
  1052 00000848 E90700                  	jmp	L_clib_90
  1053                                  L_clib_89:
  1054 0000084B 8A46FD                  	mov	al, byte [bp-3]
  1055 0000084E 98                      	cbw
  1056 0000084F 053000                  	add	ax, 48
  1057                                  L_clib_90:
  1058 00000852 8B56FE                  	mov	dx, word [bp-2]
  1059 00000855 81C20400                	add	dx, 4
  1060 00000859 89D6                    	mov	si, dx
  1061 0000085B 8D56F0                  	lea	dx, [bp-16]
  1062 0000085E 01D6                    	add	si, dx
  1063 00000860 8804                    	mov	byte [si], al
  1064 00000862 8B46FA                  	mov	ax, word [bp-6]
  1065 00000865 B90400                  	mov	cx, 4
  1066 00000868 D3F8                    	sar	ax, cl
  1067 0000086A 8946FA                  	mov	word [bp-6], ax
  1068 0000086D 8B46F8                  	mov	ax, word [bp-8]
  1069 00000870 250F00                  	and	ax, 15
  1070 00000873 8846FD                  	mov	byte [bp-3], al
  1071 00000876 807EFD09                	cmp	byte [bp-3], 9
  1072 0000087A 7E0D                    	jle	L_clib_91
  1073 0000087C 8A46FD                  	mov	al, byte [bp-3]
  1074 0000087F 98                      	cbw
  1075 00000880 2D0A00                  	sub	ax, 10
  1076 00000883 054100                  	add	ax, 65
  1077 00000886 E90700                  	jmp	L_clib_92
  1078                                  L_clib_91:
  1079 00000889 8A46FD                  	mov	al, byte [bp-3]
  1080 0000088C 98                      	cbw
  1081 0000088D 053000                  	add	ax, 48
  1082                                  L_clib_92:
  1083 00000890 8B76FE                  	mov	si, word [bp-2]
  1084 00000893 8D56F0                  	lea	dx, [bp-16]
  1085 00000896 01D6                    	add	si, dx
  1086 00000898 8804                    	mov	byte [si], al
  1087 0000089A 8B46F8                  	mov	ax, word [bp-8]
  1088 0000089D B90400                  	mov	cx, 4
  1089 000008A0 D3F8                    	sar	ax, cl
  1090 000008A2 8946F8                  	mov	word [bp-8], ax
  1091                                  L_clib_88:
  1092 000008A5 FF4EFE                  	dec	word [bp-2]
  1093                                  L_clib_86:
  1094 000008A8 817EFE0000              	cmp	word [bp-2], 0
  1095 000008AD 7D80                    	jge	L_clib_85
  1096                                  L_clib_87:
  1097 000008AF B80800                  	mov	ax, 8
  1098 000008B2 50                      	push	ax
  1099 000008B3 8D46F0                  	lea	ax, [bp-16]
  1100 000008B6 50                      	push	ax
  1101 000008B7 E842FB                  	call	print
  1102 000008BA 81C40400                	add	sp, 4
  1103 000008BE 89EC                    	mov	sp, bp
  1104 000008C0 5D                      	pop	bp
  1105 000008C1 C3                      	ret
  1106                                  L_clib_83:
  1107 000008C2 55                      	push	bp
  1108 000008C3 89E5                    	mov	bp, sp
  1109 000008C5 81EC1000                	sub	sp, 16
  1110 000008C9 E943FF                  	jmp	L_clib_84
  1111                                  
  1112                                  
  1113                                  ; Modify AsmFunction to perform the calculation gvar+(a*(b+c))/(d-e).
  1114                                  ; Keep in mind the C declaration:
  1115                                  ; int AsmFunction(int a, char b, char c, int d, int e);
  1116                                  
  1117                                  	CPU	8086
  1118                                  	align	2
  1119                                  
  1120                                  AsmFunction:
  1121 000008CC 55                      	push	bp
  1122 000008CD 89E5                    	mov		bp,sp
  1123 000008CF 53                      	push	bx
  1124 000008D0 51                      	push	cx
  1125 000008D1 8B4E0A                  	mov	cx,  [bp+10]
  1126 000008D4 2B4E0C                  	sub	cx,  [bp+12]
  1127 000008D7 8A4606                  	mov	al, byte [bp+6]
  1128 000008DA 024608                  	add	al, byte [bp+8]
  1129 000008DD 98                      	cbw
  1130 000008DE F76E04                  	imul	word [bp+4]
  1131 000008E1 F7F9                    	idiv	cx
  1132 000008E3 0306[F809]              	add	ax, [gvar]
  1133 000008E7 59                      	pop	cx
  1134 000008E8 5B                      	pop bx
  1135 000008E9 89EC                    	mov sp,bp
  1136 000008EB 5D                      	pop bp
  1137 000008EC C3                      	ret
  1138                                  
  1139                                  ; Generated by c86 (BYU-NASM) 5.1 (beta) from lab1.i
  1140                                  	CPU	8086
  1141 000008ED 90                      	ALIGN	2
  1142 000008EE E93B00                  	jmp	main	; Jump to program start
  1143                                  L_lab1_4:
  1144 000008F1 526573756C74203320-     	DB	"Result 3 is: ",0
  1145 000008FA 69733A2000         
  1146                                  L_lab1_3:
  1147 000008FF 526573756C74203220-     	DB	"Result 2 is: ",0
  1148 00000908 69733A2000         
  1149                                  L_lab1_2:
  1150 0000090D 526573756C74203120-     	DB	"Result 1 is: ",0
  1151 00000916 69733A2000         
  1152                                  L_lab1_1:
  1153 0000091B 48656C6C6F2C20776F-     	DB	"Hello, world!",0xD,0xA,0
  1154 00000924 726C64210D0A00     
  1155 0000092B 90                      	ALIGN	2
  1156                                  main:
  1157                                  	; >>>>> Line:	8
  1158                                  	; >>>>> { 
  1159 0000092C E9C300                  	jmp	L_lab1_5
  1160                                  L_lab1_6:
  1161                                  	; >>>>> Line:	9
  1162                                  	; >>>>> gvar = 0; 
  1163 0000092F C706[F809]0000          	mov	word [gvar], 0
  1164                                  	; >>>>> Line:	11
  1165                                  	; >>>>> printString("Hello, world!\r\n"); 
  1166 00000935 B8[1B09]                	mov	ax, L_lab1_1
  1167 00000938 50                      	push	ax
  1168 00000939 E802FB                  	call	printString
  1169 0000093C 81C40200                	add	sp, 2
  1170                                  	; >>>>> Line:	13
  1171                                  	; >>>>> gvar = AsmFunction(10, 35, 3, 123, 100); 
  1172 00000940 B86400                  	mov	ax, 100
  1173 00000943 50                      	push	ax
  1174 00000944 B87B00                  	mov	ax, 123
  1175 00000947 50                      	push	ax
  1176 00000948 B003                    	mov	al, 3
  1177 0000094A 50                      	push	ax
  1178 0000094B B023                    	mov	al, 35
  1179 0000094D 50                      	push	ax
  1180 0000094E B80A00                  	mov	ax, 10
  1181 00000951 50                      	push	ax
  1182 00000952 E877FF                  	call	AsmFunction
  1183 00000955 81C40A00                	add	sp, 10
  1184 00000959 A3[F809]                	mov	word [gvar], ax
  1185                                  	; >>>>> Line:	14
  1186                                  	; >>>>> print("Result 1 is: ", 13); 
  1187 0000095C B80D00                  	mov	ax, 13
  1188 0000095F 50                      	push	ax
  1189 00000960 B8[0D09]                	mov	ax, L_lab1_2
  1190 00000963 50                      	push	ax
  1191 00000964 E895FA                  	call	print
  1192 00000967 81C40400                	add	sp, 4
  1193                                  	; >>>>> Line:	15
  1194                                  	; >>>>> printInt(gvar); 
  1195 0000096B FF36[F809]              	push	word [gvar]
  1196 0000096F E8F2FA                  	call	printInt
  1197 00000972 81C40200                	add	sp, 2
  1198                                  	; >>>>> Line:	16
  1199                                  	; >>>>> printNewLine(); 
  1200 00000976 E8B1FA                  	call	printNewLine
  1201                                  	; >>>>> Line:	18
  1202                                  	; >>>>> gvar = AsmFunction(14, -10, 126, 32, 15); 
  1203 00000979 B80F00                  	mov	ax, 15
  1204 0000097C 50                      	push	ax
  1205 0000097D B82000                  	mov	ax, 32
  1206 00000980 50                      	push	ax
  1207 00000981 B07E                    	mov	al, 126
  1208 00000983 50                      	push	ax
  1209 00000984 B0F6                    	mov	al, -10
  1210 00000986 50                      	push	ax
  1211 00000987 B80E00                  	mov	ax, 14
  1212 0000098A 50                      	push	ax
  1213 0000098B E83EFF                  	call	AsmFunction
  1214 0000098E 81C40A00                	add	sp, 10
  1215 00000992 A3[F809]                	mov	word [gvar], ax
  1216                                  	; >>>>> Line:	19
  1217                                  	; >>>>> print("Result 2 is: ", 13); 
  1218 00000995 B80D00                  	mov	ax, 13
  1219 00000998 50                      	push	ax
  1220 00000999 B8[FF08]                	mov	ax, L_lab1_3
  1221 0000099C 50                      	push	ax
  1222 0000099D E85CFA                  	call	print
  1223 000009A0 81C40400                	add	sp, 4
  1224                                  	; >>>>> Line:	20
  1225                                  	; >>>>> printInt(gvar); 
  1226 000009A4 FF36[F809]              	push	word [gvar]
  1227 000009A8 E8B9FA                  	call	printInt
  1228 000009AB 81C40200                	add	sp, 2
  1229                                  	; >>>>> Line:	21
  1230                                  	; >>>>> printNewLine(); 
  1231 000009AF E878FA                  	call	printNewLine
  1232                                  	; >>>>> Line:	23
  1233                                  	; >>>>> gvar = AsmFunction(17, 18, -121, 130, 118); 
  1234 000009B2 B87600                  	mov	ax, 118
  1235 000009B5 50                      	push	ax
  1236 000009B6 B88200                  	mov	ax, 130
  1237 000009B9 50                      	push	ax
  1238 000009BA B087                    	mov	al, -121
  1239 000009BC 50                      	push	ax
  1240 000009BD B012                    	mov	al, 18
  1241 000009BF 50                      	push	ax
  1242 000009C0 B81100                  	mov	ax, 17
  1243 000009C3 50                      	push	ax
  1244 000009C4 E805FF                  	call	AsmFunction
  1245 000009C7 81C40A00                	add	sp, 10
  1246 000009CB A3[F809]                	mov	word [gvar], ax
  1247                                  	; >>>>> Line:	24
  1248                                  	; >>>>> print("Result 3 is: ", 13); 
  1249 000009CE B80D00                  	mov	ax, 13
  1250 000009D1 50                      	push	ax
  1251 000009D2 B8[F108]                	mov	ax, L_lab1_4
  1252 000009D5 50                      	push	ax
  1253 000009D6 E823FA                  	call	print
  1254 000009D9 81C40400                	add	sp, 4
  1255                                  	; >>>>> Line:	25
  1256                                  	; >>>>> printInt(gvar); 
  1257 000009DD FF36[F809]              	push	word [gvar]
  1258 000009E1 E880FA                  	call	printInt
  1259 000009E4 81C40200                	add	sp, 2
  1260                                  	; >>>>> Line:	26
  1261                                  	; >>>>> printNewLine(); 
  1262 000009E8 E83FFA                  	call	printNewLine
  1263                                  	; >>>>> Line:	28
  1264                                  	; >>>>> printNewLine(); 
  1265 000009EB E83CFA                  	call	printNewLine
  1266 000009EE 89EC                    	mov	sp, bp
  1267 000009F0 5D                      	pop	bp
  1268 000009F1 C3                      	ret
  1269                                  L_lab1_5:
  1270 000009F2 55                      	push	bp
  1271 000009F3 89E5                    	mov	bp, sp
  1272 000009F5 E937FF                  	jmp	L_lab1_6
  1273                                  	ALIGN	2
  1274                                  gvar:
  1275 000009F8 00<rept>                	TIMES	2 db 0
