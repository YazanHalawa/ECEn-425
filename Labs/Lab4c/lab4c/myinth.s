; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
reset_inth:
	; >>>>> Line:	5
	; >>>>> void reset_inth() { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	6
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
	ALIGN	2
L_myinth_4:
	DW	0
L_myinth_5:
	DB	0xA,"Tick ",0
	ALIGN	2
tick_inth:
	; >>>>> Line:	9
	; >>>>> void tick_inth() { 
	jmp	L_myinth_6
L_myinth_7:
	; >>>>> Line:	11
	; >>>>> tickCount ++; 
	inc	word [L_myinth_4]
	; >>>>> Line:	12
	; >>>>> print("\nTick ", 6); 
	mov	ax, 6
	push	ax
	mov	ax, L_myinth_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	13
	; >>>>> printInt(tickCount); 
	push	word [L_myinth_4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	14
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_6:
	push	bp
	mov	bp, sp
	jmp	L_myinth_7
L_myinth_12:
	DB	"DELAY COMPLETE",0
L_myinth_11:
	DB	"DELAY KEY PRESSED",0
L_myinth_10:
	DB	") IGNORED",0
L_myinth_9:
	DB	"KEPYRESS (",0
	ALIGN	2
keyboard_inth:
	; >>>>> Line:	17
	; >>>>> void keyboard_inth() { 
	jmp	L_myinth_13
L_myinth_14:
	; >>>>> Line:	19
	; >>>>> if (KeyBuffer != 'd') { 
	mov	word [bp-2], 0
	; >>>>> Line:	19
	; >>>>> if (KeyBuffer != 'd') { 
	cmp	word [KeyBuffer], 100
	je	L_myinth_15
	; >>>>> Line:	20
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	21
	; >>>>> printString("KEPYRESS ("); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	23
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_16
L_myinth_15:
	; >>>>> Line:	26
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	27
	; >>>>> printString("DEL 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	29
	; >>>>> while (delayCounter <= 5000) { 
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	30
	; >>>>> delayCounter++; 
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jle	L_myinth_17
L_myinth_19:
	; >>>>> Line:	32
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_16:
	mov	sp, bp
	pop	bp
	ret
L_myinth_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_14
