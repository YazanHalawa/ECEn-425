; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	33
	; >>>>> void YKInitialize (){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	35
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	36
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	38
	; >>>>> saveContext = 0; 
	mov	word [saveContext], 0
	; >>>>> Line:	39
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	40
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	41
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	42
	; >>>>> YKCurTask = 0; 
	mov	word [YKCurTask], 0
	; >>>>> Line:	43
	; >>>>> YKRdyList = 0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	44
	; >>>>> YKSuspList = 0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	45
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	60
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	61
	; >>>>> for (i = 0; i < 3; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	62
	; >>>>> YKTCBArray[i].next 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	63
	; >>>>> YKTCBArray[3].prev = 0;  
	mov	word [(46+YKTCBArray)], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 3
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	65
	; >>>>> YKTCBArray[3].next = 0; 
	mov	word [(44+YKTCBArray)], 0
	; >>>>> Line:	66
	; >>>>> YKTCBArray[3].prev = 0; 
	mov	word [(46+YKTCBArray)], 0
	; >>>>> Line:	68
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[1024]),100);   
	mov	al, 100
	push	ax
	mov	ax, (idleStk+2048)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
L_yakc_8:
	DB	"in IdleTask",0xA,0xD,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	71
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	72
	; >>>>> printString("in IdleTask\n\r"); 
	mov	ax, L_yakc_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	73
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	74
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	75
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	76
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
YKNewTask:
	; >>>>> Line:	82
	; >>>>> void YKNewTask(void (* task)(void), void *stackptr, unsigned char priority){ 
	jmp	L_yakc_15
L_yakc_16:
	; >>>>> Line:	87
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	89
	; >>>>> insertion = YKAvailTCBList 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-6], ax
	; >>>>> Line:	91
	; >>>>> if(insertion == 0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_17
	; >>>>> Line:	92
	; >>>>> return; 
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	95
	; >>>>> YKAvailTCBList =  insertion->next;    
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	97
	; >>>>> insertion->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	98
	; >>>>> insertion->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-6]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	99
	; >>>>> insertion->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	101
	; >>>>> if (YKRdyList == 0)   
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_19
	; >>>>> Line:	103
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	; >>>>> Line:	104
	; >>>>> insertion->next = 0; 
	mov	si, word [bp-6]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	105
	; >>>>> insertion->prev = 0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	109
	; >>>>> iter2 = YKRdyList;    
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	110
	; >>>>> while (iter2->priority < insertion->priority) 
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	111
	; >>>>> iter2 = iter2->next;   
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_22:
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_21
L_yakc_23:
	; >>>>> Line:	112
	; >>>>> if (iter2->prev == 0)  
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	113
	; >>>>>  
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	115
	; >>>>> iter2->prev->next = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_25:
	; >>>>> Line:	116
	; >>>>> insertion->prev = iter2->prev; 
	mov	si, word [bp-8]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	117
	; >>>>> insertion->next = iter2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	118
	; >>>>> iter2->prev = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_20:
	; >>>>> Line:	120
	; >>>>> stackIter = (unsigned *)stackptr; 
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	121
	; >>>>> stackIter -=13; 
	sub	word [bp-4], 26
	; >>>>> Line:	123
	; >>>>> for(i=0; i<13; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	124
	; >>>>> if (i == 10) { 
	cmp	word [bp-2], 10
	jne	L_yakc_30
	; >>>>> Line:	125
	; >>>>> stackIter[i] = (unsigned)task; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	126
	; >>>>> } else if (i == 12) { 
	cmp	word [bp-2], 12
	jne	L_yakc_32
	; >>>>> Line:	127
	; >>>>> stackIter[i] = 0x0200;	 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 512
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	129
	; >>>>> stackIter[i] = 0; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 0
L_yakc_33:
L_yakc_31:
L_yakc_29:
	inc	word [bp-2]
L_yakc_27:
	cmp	word [bp-2], 13
	jl	L_yakc_26
L_yakc_28:
	; >>>>> Line:	132
	; >>>>> insertion->stackptr = (void *)stackIter; 
	mov	si, word [bp-6]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	142
	; >>>>> if(running == 1) { 
	cmp	word [running], 1
	jne	L_yakc_34
	; >>>>> Line:	143
	; >>>>> YKScheduler(saveC 
	push	word [saveContext]
	call	YKScheduler
	add	sp, 2
L_yakc_34:
L_yakc_35:
	; >>>>> Line:	147
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_18:
	mov	sp, bp
	pop	bp
	ret
L_yakc_15:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_16
	ALIGN	2
YKRun:
	; >>>>> Line:	150
	; >>>>> void YKRun(){ 
	jmp	L_yakc_37
L_yakc_38:
	; >>>>> Line:	152
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	153
	; >>>>> saveContext = 1; 
	mov	word [saveContext], 1
	; >>>>> Line:	154
	; >>>>> YKScheduler(saveContext); 
	push	word [saveContext]
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_37:
	push	bp
	mov	bp, sp
	jmp	L_yakc_38
	ALIGN	2
YKScheduler:
	; >>>>> Line:	157
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_40
L_yakc_41:
	; >>>>> Line:	158
	; >>>>> if(YKRdyList != YKCurTask){   
	mov	ax, word [YKCurTask]
	cmp	ax, word [YKRdyList]
	je	L_yakc_42
	; >>>>> Line:	159
	; >>>>> YKCtxSwCount++;  
	inc	word [YKCtxSwCount]
	; >>>>> Line:	160
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_42:
	mov	sp, bp
	pop	bp
	ret
L_yakc_40:
	push	bp
	mov	bp, sp
	jmp	L_yakc_41
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	164
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_44
L_yakc_45:
	; >>>>> Line:	169
	; >>>>> if (count == 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_yakc_46
	; >>>>> Line:	170
	; >>>>> return; 
	jmp	L_yakc_47
L_yakc_46:
	; >>>>> Line:	172
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	173
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	176
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	177
	; >>>>> temp->next->prev = 0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	178
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	179
	; >>>>> temp->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> temp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	183
	; >>>>> YKSuspList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	184
	; >>>>> temp->prev = 0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	185
	; >>>>> if (temp->next != 0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_48
	; >>>>> Line:	186
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_48:
	; >>>>> Line:	187
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	188
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_47:
	mov	sp, bp
	pop	bp
	ret
L_yakc_44:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_45
L_yakc_53:
	DB	"in While prio",0xA,0
L_yakc_52:
	DB	"about to put",0xA,0
L_yakc_51:
	DB	"about to remove",0xA,0
L_yakc_50:
	DB	"in while",0xA,0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	191
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_54
L_yakc_55:
	; >>>>> Line:	193
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	194
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	195
	; >>>>> while (temp != 0){ 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	196
	; >>>>> printString("in while\n"); 
	mov	ax, L_yakc_50
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	197
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	198
	; >>>>> if (temp->delay == 0){  
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_59
	; >>>>> Line:	199
	; >>>>> temp->state = 0;  
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	200
	; >>>>> next = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	201
	; >>>>> printString("about to remove\n"); 
	mov	ax, L_yakc_51
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	203
	; >>>>> } 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_60
	; >>>>> Line:	204
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_yakc_61
L_yakc_60:
	; >>>>> Line:	207
	; >>>>> if (temp->next != 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_62
	; >>>>> Line:	208
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_62:
	; >>>>> Line:	210
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_61:
	; >>>>> Line:	213
	; >>>>> printString("about to put\n"); 
	mov	ax, L_yakc_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	215
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	216
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_64
L_yakc_63:
	; >>>>> Line:	217
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	218
	; >>>>> printString("in While prio\n"); 
	mov	ax, L_yakc_53
	push	ax
	call	printString
	add	sp, 2
L_yakc_64:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_63
L_yakc_65:
	; >>>>> Line:	220
	; >>>>>  
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	xor	ax, ax
	test	ax, ax
	je	L_yakc_66
	; >>>>> Line:	221
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_67
L_yakc_66:
	; >>>>> Line:	224
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_67:
	; >>>>> Line:	226
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	227
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	228
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	230
	; >>>>> temp = next; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	jmp	L_yakc_68
L_yakc_59:
	; >>>>> Line:	233
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_68:
L_yakc_57:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_56
L_yakc_58:
	mov	sp, bp
	pop	bp
	ret
L_yakc_54:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_55
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	238
	; >>>>> void YKEnterISR() { 
	jmp	L_yakc_70
L_yakc_71:
	; >>>>> Line:	239
	; >>>>> nestingLevel++; 
	inc	word [nestingLevel]
	mov	sp, bp
	pop	bp
	ret
L_yakc_70:
	push	bp
	mov	bp, sp
	jmp	L_yakc_71
	ALIGN	2
YKExitISR:
	; >>>>> Line:	242
	; >>>>> void YKExitISR() { 
	jmp	L_yakc_73
L_yakc_74:
	; >>>>> Line:	243
	; >>>>> nestingLevel--; 
	dec	word [nestingLevel]
	; >>>>> Line:	244
	; >>>>> if (nestingLevel == 0) { 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_75
	; >>>>> Line:	245
	; >>>>> YKScheduler(0);	 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_75:
	mov	sp, bp
	pop	bp
	ret
L_yakc_73:
	push	bp
	mov	bp, sp
	jmp	L_yakc_74
	ALIGN	2
YKIdleCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	48 db 0
running:
	TIMES	2 db 0
idleStk:
	TIMES	2048 db 0
saveContext:
	TIMES	2 db 0
nestingLevel:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
