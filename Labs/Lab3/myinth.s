; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_myinth_1:
	DW	0
	ALIGN	2
resetIntrHandler:
	; >>>>> Line:	4
	; >>>>> void resetIntrHandler(){ 
	jmp	L_myinth_2
L_myinth_3:
	; >>>>> Line:	5
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_2:
	push	bp
	mov	bp, sp
	jmp	L_myinth_3
L_myinth_5:
	DB	"Tick ",0
	ALIGN	2
tickIntrHandler:
	; >>>>> Line:	8
	; >>>>> void tickIntrHandler(){ 
	jmp	L_myinth_6
L_myinth_7:
	; >>>>> Line:	9
	; >>>>> tickCounter++; 
	inc	word [L_myinth_1]
	; >>>>> Line:	10
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	11
	; >>>>> printString("Tick "); 
	mov	ax, L_myinth_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	12
	; >>>>> printInt(tickCounter); 
	push	word [L_myinth_1]
	call	printInt
	add	sp, 2
	; >>>>> Line:	13
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_myinth_6:
	push	bp
	mov	bp, sp
	jmp	L_myinth_7
L_myinth_12:
	DB	"DELAY COMPLETE",0
L_myinth_11:
	DB	"DELAY KEY PRESSED",0
L_myinth_10:
	DB	") IGNORED",0
L_myinth_9:
	DB	"KEYPRESS (",0
	ALIGN	2
KeyboardIntrHandler:
	; >>>>> Line:	16
	; >>>>> void KeyboardIntrHandler(){ 
	jmp	L_myinth_13
L_myinth_14:
	; >>>>> Line:	17
	; >>>>> if (KeyBuffer != 'd'){ 
	cmp	word [KeyBuffer], 100
	je	L_myinth_15
	; >>>>> Line:	18
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	19
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_myinth_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	20
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_myinth_10
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_myinth_16
L_myinth_15:
	; >>>>> Line:	26
	; >>>>> prin 
	mov	word [bp-2], 0
	; >>>>> Line:	26
	; >>>>> prin 
	call	printNewLine
	; >>>>> Line:	27
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_myinth_11
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	29
	; >>>>> while (loopVar < 5000) 
	jmp	L_myinth_18
L_myinth_17:
	; >>>>> Line:	30
	; >>>>> loopVar++; 
	inc	word [bp-2]
L_myinth_18:
	cmp	word [bp-2], 5000
	jl	L_myinth_17
L_myinth_19:
	; >>>>> Line:	31
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printNewLine(); 
	call	printNewLine
L_myinth_16:
	mov	sp, bp
	pop	bp
	ret
L_myinth_13:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_14
