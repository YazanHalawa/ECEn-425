        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset ; Reset               ; Int 08h (IRQ 0)
        dd      tick ; Tick                ; Int 09h (IRQ 1)
        dd      keyboard ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      gameOver ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      newPiece ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      receivedCommand ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      touchDown ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      lineClear ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

reset:
	call	reset_inth

tick:
	call	YKSaveContext
	call	YKEnterISR

	sti 			; enable interrupts
	call	mytick
	call	YKTickHandler
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

keyboard:
	call	YKSaveContext
	call	YKEnterISR

	sti				; enable interrupts
	call	keyboard_inth
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

gameOver:
	call	YKSaveContext
	call	YKEnterISR

	sti				; enable interrupts
	call	setGameOver
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

newPiece:
	call	YKSaveContext
	call	YKEnterISR

	sti				; enable interrupts
	call	gotNewPiece_handler
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

receivedCommand:
	call	YKSaveContext
	call	YKEnterISR

	sti				; enable interrupts
	call	setReceivedCommand_handler
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

touchDown: ;Ignored
	push	ax
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al
	pop	ax
	iret

lineClear: ;Ignored
	push	ax
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al
	pop	ax
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
reset_inth:
	; >>>>> Line:	16
	; >>>>> { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	17
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
	ALIGN	2
mytick:
	; >>>>> Line:	21
	; >>>>> { 
	jmp	L_myinth_4
L_myinth_5:
	; >>>>> Line:	32
	; >>>>> }	        
	mov	sp, bp
	pop	bp
	ret
L_myinth_4:
	push	bp
	mov	bp, sp
	jmp	L_myinth_5
L_myinth_8:
	DB	") IGNORED",0xA,0
L_myinth_7:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboard_inth:
	; >>>>> Line:	36
	; >>>>> { 
	jmp	L_myinth_9
L_myinth_10:
	; >>>>> Line:	38
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	48
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_myinth_7
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	49
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_8
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_myinth_9:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_10
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	25
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	27
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	28
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	30
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	31
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	32
	; >>>>> YKCurTask = 0x0;  
	mov	word [YKCurTask], 0
	; >>>>> Line:	33
	; >>>>> YKRdyList = 0x0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	34
	; >>>>> YKSuspList = 0x0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	35
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	36
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	37
	; >>>>> YKAvaiSems = 1; 
	mov	word [YKAvaiSems], 1
	; >>>>> Line:	38
	; >>>>> YKQAvailCount = 2; 
	mov	word [YKQAvailCount], 2
	; >>>>> Line:	39
	; >>>>> YKAvaiEvents = 1; 
	mov	word [YKAvaiEvents], 1
	; >>>>> Line:	42
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	43
	; >>>>> for (i = 0; i < 3; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	44
	; >>>>> ailTCB 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [bp-2]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	45
	; >>>>> YKTCBArray[3].prev = 0x0;  
	mov	word [(58+YKTCBArray)], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 3
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	47
	; >>>>> YKTCBArray[3].next = 0x0; 
	mov	word [(56+YKTCBArray)], 0
	; >>>>> Line:	48
	; >>>>> YKTCBArray[3].prev = 0x0; 
	mov	word [(58+YKTCBArray)], 0
	; >>>>> Line:	50
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100);   
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	53
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	54
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	55
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	56
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	57
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	62
	; >>>>> void YKNewTask(void (* task)(void), void *stackptr, unsigned char priority){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	67
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	69
	; >>>>> insertion = YKAvailTCB 
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-6], ax
	; >>>>> Line:	71
	; >>>>> if(insertion == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	72
	; >>>>> return; 
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	75
	; >>>>> YKAvailTCBList =  insertion->next;    
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	77
	; >>>>> insertion->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	78
	; >>>>> insertion->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-6]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	79
	; >>>>> insertion->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	80
	; >>>>> insertion->flags = 0; 
	mov	si, word [bp-6]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	81
	; >>>>> insertion->waitMode = 0; 
	mov	si, word [bp-6]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	83
	; >>>>> if (YKRdyList == 0x0)   
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_18
	; >>>>> Line:	85
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	; >>>>> Line:	86
	; >>>>> insertion->next = 0x0; 
	mov	si, word [bp-6]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	87
	; >>>>> insertion->prev = 0x0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	91
	; >>>>> iter2 = YKRdyList;    
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	92
	; >>>>> while (iter2->priority < insertion->priority) 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	93
	; >>>>>  
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_21:
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_20
L_yakc_22:
	; >>>>> Line:	94
	; >>>>> if (iter2->prev == 0x0)  
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_23
	; >>>>> Line:	95
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_24
L_yakc_23:
	; >>>>> Line:	97
	; >>>>> iter2->prev->next = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_24:
	; >>>>> Line:	98
	; >>>>> insertion->prev = iter2->prev; 
	mov	si, word [bp-8]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	99
	; >>>>> insertion->next = iter2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	100
	; >>>>> iter2->prev = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_19:
	; >>>>> Line:	102
	; >>>>> stackIter = (unsigned *)stackptr; 
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	103
	; >>>>> stackIter -=13; 
	sub	word [bp-4], 26
	; >>>>> Line:	105
	; >>>>> for(i=0; i<13; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_26
L_yakc_25:
	; >>>>> Line:	106
	; >>>>> if (i == 10) { 
	cmp	word [bp-2], 10
	jne	L_yakc_29
	; >>>>> Line:	107
	; >>>>> stackIter[i] = (unsigned)task; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	108
	; >>>>> } else if (i == 12) { 
	cmp	word [bp-2], 12
	jne	L_yakc_31
	; >>>>> Line:	109
	; >>>>> stackIter[i] = 0x0200;    
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 512
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	111
	; >>>>> t = temp->next;  
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 0
L_yakc_32:
L_yakc_30:
L_yakc_28:
	inc	word [bp-2]
L_yakc_26:
	cmp	word [bp-2], 13
	jl	L_yakc_25
L_yakc_27:
	; >>>>> Line:	114
	; >>>>> insertion->stackptr = (void *)stackIter; 
	mov	si, word [bp-6]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	115
	; >>>>> if(running == 1) { 
	cmp	word [running], 1
	jne	L_yakc_33
	; >>>>> Line:	116
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_33:
	; >>>>> Line:	118
	; >>>>> YKExitMutex();  
	call	YKExitMutex
L_yakc_17:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_15
	ALIGN	2
YKRun:
	; >>>>> Line:	121
	; >>>>> void YKRun(){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	123
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	124
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	jmp	L_yakc_36
	ALIGN	2
YKScheduler:
	; >>>>> Line:	127
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	128
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	129
	; >>>>> if(YKRdyList != YKCurTask){   
	mov	ax, word [YKCurTask]
	cmp	ax, word [YKRdyList]
	je	L_yakc_40
	; >>>>> Line:	130
	; >>>>> YKCtxSwCount++;  
	inc	word [YKCtxSwCount]
	; >>>>> Line:	131
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	133
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	jmp	L_yakc_39
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	136
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	138
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	139
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	141
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	142
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_44
	; >>>>> Line:	143
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_44:
	; >>>>> Line:	144
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	145
	; >>>>> temp->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	148
	; >>>>> temp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	149
	; >>>>> YKSuspList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	150
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	151
	; >>>>> if (temp->next != 0x0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_45
	; >>>>> Line:	152
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_45:
	; >>>>> Line:	153
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	154
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	157
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_47
L_yakc_48:
	; >>>>> Line:	159
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	160
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	161
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	162
	; >>>>> while (temp != 0x0){ 
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	163
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	164
	; >>>>> if (temp->delay == 0){  
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	165
	; >>>>> temp->state = 0;  
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	166
	; >>>>>  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	168
	; >>>>> if (temp->prev == 0x0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_53
	; >>>>> Line:	169
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_yakc_54
L_yakc_53:
	; >>>>> Line:	172
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_54:
	; >>>>> Line:	174
	; >>>>> if (temp->next != 0x0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	175
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_55:
	; >>>>> Line:	178
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	179
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	180
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_57:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_56
L_yakc_58:
	; >>>>> Line:	182
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_59
	; >>>>> Line:	183
	; >>>>> KSEM* YKSemCrea 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	186
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_60:
	; >>>>> Line:	188
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	189
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	190
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	192
	; >>>>> temp = next; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	jmp	L_yakc_61
L_yakc_52:
	; >>>>> Line:	195
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_61:
L_yakc_50:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_49
L_yakc_51:
	; >>>>> Line:	198
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_47:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_48
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	201
	; >>>>> void YKEnterISR() { 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	202
	; >>>>> nestingLevel++; 
	inc	word [nestingLevel]
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	jmp	L_yakc_64
	ALIGN	2
YKExitISR:
	; >>>>> Line:	205
	; >>>>> void YKExitISR() { 
	jmp	L_yakc_66
L_yakc_67:
	; >>>>> Line:	207
	; >>>>> nestingLevel--; 
	dec	word [nestingLevel]
	; >>>>> Line:	208
	; >>>>> if (nestingLevel == 0 && running) { 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_68
	mov	ax, word [running]
	test	ax, ax
	je	L_yakc_68
	; >>>>> Line:	209
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_68:
	mov	sp, bp
	pop	bp
	ret
L_yakc_66:
	push	bp
	mov	bp, sp
	jmp	L_yakc_67
L_yakc_70:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	213
	; >>>>> 0){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	214
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	215
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_73
	; >>>>> Line:	216
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	217
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_70
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	218
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_74
L_yakc_73:
	; >>>>> Line:	221
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	222
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	223
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0x0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_74:
	; >>>>> Line:	225
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	228
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_75:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKSemPend:
	; >>>>> Line:	232
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	236
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	237
	; >>>>> if (semaphore->value-- > 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_79
	; >>>>> Line:	239
	; >>>>>  
	call	YKExitMutex
	; >>>>> Line:	240
	; >>>>> return; 
	jmp	L_yakc_80
L_yakc_79:
	; >>>>> Line:	243
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	245
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	246
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_81
	; >>>>> Line:	247
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_81:
	; >>>>> Line:	249
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	251
	; >>>>> if (semaphore->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_82
	; >>>>> Line:	252
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	253
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	254
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	257
	; >>>>> iter = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	258
	; >>>>> temp2 = 0x0; 
	mov	word [bp-4], 0
	; >>>>> Line:	259
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	260
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	261
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_85:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_87
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_84
L_yakc_87:
L_yakc_86:
	; >>>>> Line:	263
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_88
	; >>>>> Line:	264
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	265
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	266
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	269
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	270
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	271
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	272
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_90
	; >>>>> Line:	273
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	275
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_91:
L_yakc_89:
L_yakc_83:
	; >>>>> Line:	279
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	281
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	284
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_93
L_yakc_94:
	; >>>>> Line:	287
	; >>>>>  
	call	YKEnterMutex
	; >>>>> Line:	288
	; >>>>> if (semaphore->value++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_95
	; >>>>> Line:	290
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	291
	; >>>>> return; 
	jmp	L_yakc_96
L_yakc_95:
	; >>>>> Line:	294
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	295
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	296
	; >>>>> if (semaphore->blockedOn != 0x0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_97
	; >>>>> Line:	297
	; >>>>> semaphore->blockedOn->prev = 0x0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_97:
	; >>>>> Line:	299
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	301
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	302
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_99
L_yakc_98:
	; >>>>> Line:	303
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_99:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_98
L_yakc_100:
	; >>>>> Line:	305
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	306
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	309
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_102:
	; >>>>> Line:	311
	; >>>>> temp->prev  
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	312
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	313
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	315
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_103
	; >>>>> Line:	316
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_103:
	; >>>>> Line:	318
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_96:
	mov	sp, bp
	pop	bp
	ret
L_yakc_93:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_94
	ALIGN	2
YKQCreate:
	; >>>>> Line:	321
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_105
L_yakc_106:
	; >>>>> Line:	322
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	323
	; >>>>> if (YKQAvailCount <= 0){ 
	cmp	word [YKQAvailCount], 0
	jg	L_yakc_107
	; >>>>> Line:	324
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	325
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_107:
	; >>>>> Line:	327
	; >>>>> YKQAvailCount--; 
	dec	word [YKQAvailCount]
	; >>>>> Line:	328
	; >>>>> YKQs[YKQAvailCount].baseAddress = (void **)start; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	mov	si, ax
	add	si, YKQs
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	329
	; >>>>> YKQs[YKQAvailCount].numOfEntries = size; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> YKQs[YKQAvailCount].addLoc = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	331
	; >>>>> YKQs[YKQAvailCount].removeLoc = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	332
	; >>>>> YKQs[YKQAvailCount].blo 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	333
	; >>>>> YKQs[YKQAvailCount].numOfMsgs = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	334
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	335
	; >>>>> return &(YKQs[YKQAvailCount]); 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
L_yakc_108:
	mov	sp, bp
	pop	bp
	ret
L_yakc_105:
	push	bp
	mov	bp, sp
	jmp	L_yakc_106
	ALIGN	2
YKQPend:
	; >>>>> Line:	338
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_111
L_yakc_112:
L_yakc_110:
	; >>>>> Line:	342
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	343
	; >>>>> if (queue->numOfMsgs > 0){  
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jle	L_yakc_113
	; >>>>> Line:	345
	; >>>>> tempMsg = queue->baseAddress[queue->removeLoc]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	346
	; >>>>> queue->removeLoc++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	348
	; >>>>> if (queue->removeLoc >= queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_114
	; >>>>> Line:	349
	; >>>>> queue->removeLoc = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_114:
	; >>>>> Line:	351
	; >>>>> queue->numOfMsgs--; 
	mov	si, word [bp+4]
	add	si, 10
	dec	word [si]
	jmp	L_yakc_115
L_yakc_113:
	; >>>>> Line:	355
	; >>>>> iter = 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	357
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	358
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_116
	; >>>>> Line:	359
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_116:
	; >>>>> Line:	361
	; >>>>> temp->state = 2; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	363
	; >>>>> if (queue->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_117
	; >>>>> Line:	364
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	365
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	366
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_118
L_yakc_117:
	; >>>>> Line:	369
	; >>>>> iter = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	370
	; >>>>> temp2 = 0x0; 
	mov	word [bp-6], 0
	; >>>>> Line:	371
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	372
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
	; >>>>> Line:	373
	; >>>>> iter = 
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_120:
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_122
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_119
L_yakc_122:
L_yakc_121:
	; >>>>> Line:	375
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_123
	; >>>>> Line:	376
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	377
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	378
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_124
L_yakc_123:
	; >>>>> Line:	381
	; >>>>> temp->next = iter; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	382
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	383
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	384
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_125
	; >>>>> Line:	385
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_126
L_yakc_125:
	; >>>>> Line:	387
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_126:
L_yakc_124:
L_yakc_118:
	; >>>>> Line:	390
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	391
	; >>>>> goto TOP; 
	jmp	L_yakc_110
L_yakc_115:
	; >>>>> Line:	393
	; >>>>> f  
	call	YKExitMutex
	; >>>>> Line:	394
	; >>>>> return tempMsg; 
	mov	ax, word [bp-2]
L_yakc_127:
	mov	sp, bp
	pop	bp
	ret
L_yakc_111:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_112
	ALIGN	2
YKQPost:
	; >>>>> Line:	398
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	400
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	401
	; >>>>> if (queue->numOfMsgs < queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_131
	; >>>>> Line:	402
	; >>>>> queue->baseAddress[queue->addLoc] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	404
	; >>>>> queue->addLoc++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	406
	; >>>>> if (queue->addLoc >= queue->numOfEntries) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_132
	; >>>>> Line:	407
	; >>>>> queue->addLoc = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
L_yakc_132:
	; >>>>> Line:	408
	; >>>>> queue->numOfMsgs++; 
	mov	si, word [bp+4]
	add	si, 10
	inc	word [si]
	; >>>>> Line:	410
	; >>>>> if (queue->blockedOn != 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_133
	; >>>>> Line:	411
	; >>>>> temp = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	412
	; >>>>> queue->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	413
	; >>>>> if  
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_134
	; >>>>> Line:	414
	; >>>>> queue->blockedOn->prev = 0x0;  
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_134:
	; >>>>> Line:	416
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	418
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	419
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_136
L_yakc_135:
	; >>>>> Line:	420
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_136:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_135
L_yakc_137:
	; >>>>> Line:	422
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_138
	; >>>>> Line:	423
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	426
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_139:
	; >>>>> Line:	428
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	429
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	430
	; >>>>> temp2-> 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	432
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_140
	; >>>>> Line:	433
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_140:
L_yakc_133:
	; >>>>> Line:	436
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	437
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_141
	jmp	L_yakc_142
L_yakc_131:
	; >>>>> Line:	440
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	441
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_142:
L_yakc_141:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_130
L_yakc_144:
	DB	"not enough events",0xA,0
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	446
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_145
L_yakc_146:
	; >>>>> Line:	447
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	448
	; >>>>> if (YKAvaiEvents <= 0){ 
	cmp	word [YKAvaiEvents], 0
	jg	L_yakc_147
	; >>>>> Line:	449
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	450
	; >>>>> printString("not enough events\n"); 
	mov	ax, L_yakc_144
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	451
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_147:
	; >>>>> Line:	453
	; >>>>> YKAvaiEvents--; 
	dec	word [YKAvaiEvents]
	; >>>>> Line:	454
	; >>>>> YKEvents[YKAvaiEvents].flags = initialValue; 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEvents
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	455
	; >>>>> YKEvents[YKAvaiEvents].wai 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEvents
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	456
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	457
	; >>>>> return &(YKEvents[YKAvaiEvents]); 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEvents
L_yakc_148:
	mov	sp, bp
	pop	bp
	ret
L_yakc_145:
	push	bp
	mov	bp, sp
	jmp	L_yakc_146
	ALIGN	2
checkConditions:
	; >>>>> Line:	460
	; >>>>> int checkConditions(unsigned eventFlags, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_150
L_yakc_151:
	; >>>>> Line:	463
	; >>>>> if (waitMode == 1){ 
	mov	word [bp-2], 0
	; >>>>> Line:	463
	; >>>>> if (waitMode == 1){ 
	cmp	word [bp+8], 1
	jne	L_yakc_152
	; >>>>> Line:	464
	; >>>>> conditionMet = 1; 
	mov	word [bp-2], 1
	; >>>>> Line:	466
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-4], 0
	jmp	L_yakc_154
L_yakc_153:
	; >>>>> Line:	467
	; >>>>> if ((eventMask & (1 << i))){ 
	mov	ax, 1
	mov	cx, word [bp-4]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_157
	; >>>>> Line:	468
	; >>>>> if (!(eventFlags & (1 << i))){ 
	mov	ax, 1
	shl	ax, cl
	and	ax, word [bp+4]
	jne	L_yakc_158
	; >>>>> Line:	469
	; >>>>> conditionMet = 0; 
	mov	word [bp-2], 0
L_yakc_158:
L_yakc_157:
L_yakc_156:
	inc	word [bp-4]
L_yakc_154:
	cmp	word [bp-4], 16
	jl	L_yakc_153
L_yakc_155:
	jmp	L_yakc_159
L_yakc_152:
	; >>>>> Line:	474
	; >>>>> else if (waitMode == 0){ 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_160
	; >>>>> Line:	475
	; >>>>> for (i = 0; i < 16; i 
	mov	word [bp-4], 0
	jmp	L_yakc_162
L_yakc_161:
	; >>>>> Line:	476
	; >>>>> if (eventMask & (1 << i)){ 
	mov	ax, 1
	mov	cx, word [bp-4]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_165
	; >>>>> Line:	477
	; >>>>> if (eventFlags & (1 << i)){ 
	mov	ax, 1
	shl	ax, cl
	and	ax, word [bp+4]
	je	L_yakc_166
	; >>>>> Line:	478
	; >>>>> conditionMet = 1; 
	mov	word [bp-2], 1
	; >>>>> Line:	479
	; >>>>> break; 
	jmp	L_yakc_163
L_yakc_166:
L_yakc_165:
L_yakc_164:
	inc	word [bp-4]
L_yakc_162:
	cmp	word [bp-4], 16
	jl	L_yakc_161
L_yakc_163:
	jmp	L_yakc_167
L_yakc_160:
	; >>>>> Line:	485
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_167:
L_yakc_159:
	; >>>>> Line:	487
	; >>>>> return conditionMet; 
	mov	ax, word [bp-2]
L_yakc_168:
	mov	sp, bp
	pop	bp
	ret
L_yakc_150:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_151
	ALIGN	2
YKEventPend:
	; >>>>> Line:	490
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_170
L_yakc_171:
	; >>>>> Line:	495
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	495
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	497
	; >>>>> conditionMet = checkConditions(event->flags, eventMask, wai 
	push	word [bp+8]
	push	word [bp+6]
	mov	si, word [bp+4]
	push	word [si]
	call	checkConditions
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	500
	; >>>>> if (conditionMet){ 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_172
	; >>>>> Line:	501
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	502
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	503
	; >>>>> return flags; 
	mov	ax, word [bp-6]
	jmp	L_yakc_173
	jmp	L_yakc_174
L_yakc_172:
	; >>>>> Line:	507
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	509
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	510
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_175
	; >>>>> Line:	511
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_175:
	; >>>>> Line:	513
	; >>>>> temp->state = 2; 
	mov	si, word [bp-8]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	514
	; >>>>> temp->flags = eventMask; 
	mov	si, word [bp-8]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	515
	; >>>>> temp->waitMode = waitMode; 
	mov	si, word [bp-8]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	517
	; >>>>> if (event->waitingOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_176
	; >>>>> Line:	518
	; >>>>> event->waitingOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	519
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-8]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	520
	; >>>>> temp->prev =  
	mov	si, word [bp-8]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_177
L_yakc_176:
	; >>>>> Line:	523
	; >>>>> iter = event->waitingOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-12], ax
	; >>>>> Line:	524
	; >>>>> temp2 = 0x0; 
	mov	word [bp-10], 0
	; >>>>> Line:	525
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_179
L_yakc_178:
	; >>>>> Line:	526
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-12]
	mov	word [bp-10], ax
	; >>>>> Line:	527
	; >>>>> iter = iter->next; 
	mov	si, word [bp-12]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-12], ax
L_yakc_179:
	mov	ax, word [bp-12]
	test	ax, ax
	je	L_yakc_181
	mov	si, word [bp-12]
	add	si, 4
	mov	di, word [bp-8]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_178
L_yakc_181:
L_yakc_180:
	; >>>>> Line:	529
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-12]
	test	ax, ax
	jne	L_yakc_182
	; >>>>> Line:	530
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	531
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	532
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-8]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_183
L_yakc_182:
	; >>>>> Line:	535
	; >>>>> temp->next = iter; 
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [bp-12]
	mov	word [si], ax
	; >>>>> Line:	536
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-10]
	mov	word [si], ax
	; >>>>> Line:	537
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-12]
	add	si, 10
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	538
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-10]
	test	ax, ax
	jne	L_yakc_184
	; >>>>> Line:	539
	; >>>>> event->waitingOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-8]
	mov	word [si], ax
	jmp	L_yakc_185
L_yakc_184:
	; >>>>> Line:	541
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
L_yakc_185:
L_yakc_183:
L_yakc_177:
	; >>>>> Line:	544
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	545
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	546
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_174:
	; >>>>> Line:	548
	; >>>>> return flags; 
	mov	ax, word [bp-6]
L_yakc_173:
	mov	sp, bp
	pop	bp
	ret
L_yakc_170:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_yakc_171
	ALIGN	2
YKEventSet:
	; >>>>> Line:	551
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_187
L_yakc_188:
	; >>>>> Line:	556
	; >>>>> YKEnterMutex(); 
	mov	word [bp-4], 0
	; >>>>> Line:	556
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	558
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_190
L_yakc_189:
	; >>>>> Line:	559
	; >>>>> if (eventMask & (1 << i)){ 
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_193
	; >>>>> Line:	560
	; >>>>> >next->pre 
	mov	si, word [bp+4]
	mov	ax, 1
	shl	ax, cl
	or	word [si], ax
L_yakc_193:
L_yakc_192:
	inc	word [bp-2]
L_yakc_190:
	cmp	word [bp-2], 16
	jl	L_yakc_189
L_yakc_191:
	; >>>>> Line:	563
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-14], ax
	; >>>>> Line:	565
	; >>>>> iter = event->waitingOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	566
	; >>>>> while (iter != 0x0){ 
	jmp	L_yakc_195
L_yakc_194:
	; >>>>> Line:	568
	; >>>>> if (checkConditions(flags, iter->flags, iter->waitMode)){ 
	mov	si, word [bp-6]
	add	si, 14
	push	word [si]
	mov	si, word [bp-6]
	add	si, 12
	push	word [si]
	push	word [bp-14]
	call	checkConditions
	add	sp, 6
	test	ax, ax
	je	L_yakc_197
	; >>>>> Line:	570
	; >>>>> next = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-12], ax
	; >>>>> Line:	572
	; >>>>> if (iter == event->waitingOn){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jne	L_yakc_198
	; >>>>> Line:	573
	; >>>>> event->waitingOn = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_198:
	; >>>>> Line:	575
	; >>>>> if (iter->prev != 0x0) 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_199
	; >>>>> Line:	576
	; >>>>> iter->prev->next = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	di, word [bp-6]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_199:
	; >>>>> Line:	577
	; >>>>> if (iter->next != 0x0) 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_200
	; >>>>> Line:	578
	; >>>>> iter->next->pre 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_200:
	; >>>>> Line:	580
	; >>>>> iter->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	582
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-10], ax
	; >>>>> Line:	583
	; >>>>> while (temp2->priority < iter->priority){ 
	jmp	L_yakc_202
L_yakc_201:
	; >>>>> Line:	584
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-10], ax
L_yakc_202:
	mov	si, word [bp-10]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_201
L_yakc_203:
	; >>>>> Line:	586
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-10]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_204
	; >>>>> Line:	587
	; >>>>> YKRdyList = iter; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_205
L_yakc_204:
	; >>>>> Line:	590
	; >>>>> temp2->prev->next = iter; 
	mov	si, word [bp-10]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_205:
	; >>>>> Line:	592
	; >>>>> iter->prev = temp2->prev; 
	mov	si, word [bp-10]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	593
	; >>>>> iter->next = temp2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-10]
	mov	word [si], ax
	; >>>>> Line:	594
	; >>>>> temp2->prev = iter; 
	mov	si, word [bp-10]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	595
	; >>>>> taskMadeReady = 1; 
	mov	word [bp-4], 1
	; >>>>> Line:	596
	; >>>>> i 
	mov	ax, word [bp-12]
	mov	word [bp-6], ax
	jmp	L_yakc_206
L_yakc_197:
	; >>>>> Line:	598
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_206:
L_yakc_195:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_194
L_yakc_196:
	; >>>>> Line:	602
	; >>>>> if (taskMadeReady && nestingLevel == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_207
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_207
	; >>>>> Line:	603
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_207:
	; >>>>> Line:	604
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_187:
	push	bp
	mov	bp, sp
	sub	sp, 14
	jmp	L_yakc_188
	ALIGN	2
YKEventReset:
	; >>>>> Line:	607
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_209
L_yakc_210:
	; >>>>> Line:	609
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	610
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_212
L_yakc_211:
	; >>>>> Line:	612
	; >>>>> if (eventMask & (1 << i)){ 
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_215
	; >>>>> Line:	613
	; >>>>> event->flags &= ~((1 << i)); 
	mov	si, word [bp+4]
	mov	ax, 1
	shl	ax, cl
	not	ax
	and	word [si], ax
L_yakc_215:
L_yakc_214:
	inc	word [bp-2]
L_yakc_212:
	cmp	word [bp-2], 16
	jl	L_yakc_211
L_yakc_213:
	; >>>>> Line:	616
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_209:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_210
	ALIGN	2
YKTickNum:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	64 db 0
running:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
nestingLevel:
	TIMES	2 db 0
YKQAvailCount:
	TIMES	2 db 0
YKQs:
	TIMES	24 db 0
YKSems:
	TIMES	4 db 0
YKAvaiSems:
	TIMES	2 db 0
YKEvents:
	TIMES	4 db 0
YKAvaiEvents:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab8app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
setReceivedCommand_handler:
	; >>>>> Line:	72
	; >>>>> void setReceivedCommand_handler(void){ 
	jmp	L_lab8app_1
L_lab8app_2:
	; >>>>> Line:	73
	; >>>>> YKSemPost(nextCommandPtr); 
	push	word [nextCommandPtr]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_1:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_2
L_lab8app_4:
	DB	"not enough pieces",0xD,0xA,0
	ALIGN	2
gotNewPiece_handler:
	; >>>>> Line:	76
	; >>>>> void gotNewPiece_handler(void){ 
	jmp	L_lab8app_5
L_lab8app_6:
	; >>>>> Line:	77
	; >>>>> if (availablePieces <= 0){ 
	cmp	word [availablePieces], 0
	jg	L_lab8app_7
	; >>>>> Line:	78
	; >>>>> printString("not enough pieces\r\n"); 
	mov	ax, L_lab8app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	79
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_lab8app_7:
	; >>>>> Line:	81
	; >>>>> availablePieces--; 
	dec	word [availablePieces]
	; >>>>> Line:	82
	; >>>>> pieces[availablePieces].id = NewPieceID; 
	mov	ax, word [availablePieces]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, pieces
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	83
	; >>>>> pieces[availablePieces].type = NewPieceType; 
	mov	ax, word [availablePieces]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	84
	; >>>>> pieces[availablePieces].orientation = NewPieceOrientation; 
	mov	ax, word [availablePieces]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 4
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	85
	; >>>>> pieces[availablePiec 
	mov	ax, word [availablePieces]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	mov	si, ax
	add	si, 6
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	87
	; >>>>> YKQPost(pieceQPtr, (void*) &(pieces[availablePieces])); 
	mov	ax, word [availablePieces]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieces
	push	ax
	push	word [pieceQPtr]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_lab8app_5:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_6
L_lab8app_9:
	DB	"GAME OVER!",0
	ALIGN	2
setGameOver:
	; >>>>> Line:	90
	; >>>>> void setGameOver(void){ 
	jmp	L_lab8app_10
L_lab8app_11:
	; >>>>> Line:	91
	; >>>>> printString("GAME OVER!"); 
	mov	ax, L_lab8app_9
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	92
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_lab8app_10:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_11
L_lab8app_13:
	DB	"not enough moves",0xD,0xA,0
	ALIGN	2
createMove:
	; >>>>> Line:	97
	; >>>>> void createMove(unsigned idOfPiece, int action){ 
	jmp	L_lab8app_14
L_lab8app_15:
	; >>>>> Line:	98
	; >>>>> if (availableMoves <= 0){ 
	cmp	word [availableMoves], 0
	jg	L_lab8app_16
	; >>>>> Line:	99
	; >>>>> printString("not enough moves\r\n"); 
	mov	ax, L_lab8app_13
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	100
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_lab8app_16:
	; >>>>> Line:	102
	; >>>>> availableMoves--; 
	dec	word [availableMoves]
	; >>>>> Line:	103
	; >>>>> moves[availableMoves].idOfPiece = idOfPiece; 
	mov	ax, word [availableMoves]
	shl	ax, 1
	shl	ax, 1
	add	ax, moves
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	104
	; >>>>> moves[availableMoves].action = action; 
	mov	ax, word [availableMoves]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, moves
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	106
	; >>>>> YKQPost(moveQPtr, (void*) &(moves[availableMoves])); 
	mov	ax, word [availableMoves]
	shl	ax, 1
	shl	ax, 1
	add	ax, moves
	push	ax
	push	word [moveQPtr]
	call	YKQPost
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_lab8app_14:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_15
	ALIGN	2
placementTask:
	; >>>>> Line:	111
	; >>>>> Ptr); 
	jmp	L_lab8app_18
L_lab8app_19:
	; >>>>> Line:	114
	; >>>>> while(1){ 
	jmp	L_lab8app_21
L_lab8app_20:
	; >>>>> Line:	115
	; >>>>> temp = (PIECE*)YKQPend(pieceQPtr);  
	push	word [pieceQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	116
	; >>>>> availablePieces++; 
	inc	word [availablePieces]
	; >>>>> Line:	119
	; >>>>> id = temp->id; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	120
	; >>>>> type = temp->type; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-10], ax
	; >>>>> Line:	121
	; >>>>> orient = temp->orientation; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	122
	; >>>>> col = temp->column; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	125
	; >>>>> if (type == 0){ 
	mov	ax, word [bp-10]
	test	ax, ax
	jne	L_lab8app_23
	; >>>>> Line:	126
	; >>>>> createMove(id, 0); 
	xor	ax, ax
	push	ax
	push	word [bp-4]
	call	createMove
	add	sp, 4
	jmp	L_lab8app_24
L_lab8app_23:
	; >>>>> Line:	129
	; >>>>> createMove(id, 1); 
	mov	ax, 1
	push	ax
	push	word [bp-4]
	call	createMove
	add	sp, 4
L_lab8app_24:
L_lab8app_21:
	jmp	L_lab8app_20
L_lab8app_22:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_18:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab8app_19
	ALIGN	2
communicationTask:
	; >>>>> Line:	134
	; >>>>> void communicationTask(void){  
	jmp	L_lab8app_26
L_lab8app_27:
	; >>>>> Line:	136
	; >>>>> while(1){ 
	jmp	L_lab8app_29
L_lab8app_28:
	; >>>>> Line:	137
	; >>>>> YKSemPend(nextCommandPtr); 
	push	word [nextCommandPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	138
	; >>>>>  
	push	word [moveQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	139
	; >>>>> availableMoves++; 
	inc	word [availableMoves]
	; >>>>> Line:	142
	; >>>>> if (temp->action == 0){ 
	mov	si, word [bp-2]
	mov	ax, word [si]
	test	ax, ax
	jne	L_lab8app_31
	; >>>>> Line:	143
	; >>>>> SlidePiece(temp->idOfPiece, 0); 
	xor	ax, ax
	push	ax
	add	si, 2
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_32
L_lab8app_31:
	; >>>>> Line:	144
	; >>>>> } else if (temp->action == 1){ 
	mov	si, word [bp-2]
	cmp	word [si], 1
	jne	L_lab8app_33
	; >>>>> Line:	145
	; >>>>> SlidePiece(temp->idOfPiece, 1); 
	mov	ax, 1
	push	ax
	add	si, 2
	push	word [si]
	call	SlidePiece
	add	sp, 4
	jmp	L_lab8app_34
L_lab8app_33:
	; >>>>> Line:	146
	; >>>>> } else if (temp->action == 2){ 
	mov	si, word [bp-2]
	cmp	word [si], 2
	jne	L_lab8app_35
	; >>>>> Line:	147
	; >>>>> RotatePiece(temp->idOfPiece, 1); 
	mov	ax, 1
	push	ax
	add	si, 2
	push	word [si]
	call	RotatePiece
	add	sp, 4
	jmp	L_lab8app_36
L_lab8app_35:
	; >>>>> Line:	149
	; >>>>> RotatePiece(temp->idOfPiece, 0); 
	xor	ax, ax
	push	ax
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	RotatePiece
	add	sp, 4
L_lab8app_36:
L_lab8app_34:
L_lab8app_32:
L_lab8app_29:
	jmp	L_lab8app_28
L_lab8app_30:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_26:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab8app_27
L_lab8app_42:
	DB	"% >",0xD,0xA,0
L_lab8app_41:
	DB	", CPU: ",0
L_lab8app_40:
	DB	"<CS: ",0
L_lab8app_39:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab8app_38:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
statisticsTask:
	; >>>>> Line:	154
	; >>>>> void statisticsTask(void){  
	jmp	L_lab8app_43
L_lab8app_44:
	; >>>>> Line:	158
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> dleCount = YKIdleCount 
	mov	ax, L_lab8app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	160
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab8app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	162
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	163
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	164
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-4], ax
	; >>>>> Line:	165
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	168
	; >>>>> SeedSimptris(37428L); 
	mov	ax, 37428
	xor	dx, dx
	push	dx
	push	ax
	call	SeedSimptris
	add	sp, 4
	; >>>>> Line:	169
	; >>>>> StartSimptris(); 
	call	StartSimptris
	; >>>>> Line:	172
	; >>>>> YKNewTask(placement, (void*) &placement[512], 1); 
	mov	al, 1
	push	ax
	mov	ax, (placement+1024)
	push	ax
	mov	ax, placement
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	173
	; >>>>> YKNewTask(communication, (void*) &communication[512], 2); 
	mov	al, 2
	push	ax
	mov	ax, (communication+1024)
	push	ax
	mov	ax, communication
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	175
	; >>>>> while(1){ 
	jmp	L_lab8app_46
L_lab8app_45:
	; >>>>> Line:	177
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	179
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	180
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-6], ax
	; >>>>> Line:	181
	; >>>>> idleCount = YKIdleCount 
	mov	ax, word [YKIdleCount]
	mov	word [bp-2], ax
	; >>>>> Line:	182
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	184
	; >>>>> printString("<CS: "); 
	mov	ax, L_lab8app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	185
	; >>>>> printInt((int)switchCount); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	186
	; >>>>> printString(", CPU: "); 
	mov	ax, L_lab8app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	187
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-2]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp-8], ax
	; >>>>> Line:	188
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	189
	; >>>>> printString("% >\r\n"); 
	mov	ax, L_lab8app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	191
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	192
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	193
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	194
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab8app_46:
	jmp	L_lab8app_45
L_lab8app_47:
	mov	sp, bp
	pop	bp
	ret
L_lab8app_43:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab8app_44
	ALIGN	2
main:
	; >>>>> Line:	203
	; >>>>> { 
	jmp	L_lab8app_49
L_lab8app_50:
	; >>>>> Line:	204
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	207
	; >>>>> YKNewTask(statisticsTask, (void *) &statistics[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (statistics+1024)
	push	ax
	mov	ax, statisticsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	208
	; >>>>> nextCommandPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [nextCommandPtr], ax
	; >>>>> Line:	209
	; >>>>> pieceQPtr = YK 
	mov	ax, 10
	push	ax
	mov	ax, pieceQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [pieceQPtr], ax
	; >>>>> Line:	210
	; >>>>> moveQPtr = YKQCreate(moveQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, moveQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [moveQPtr], ax
	; >>>>> Line:	211
	; >>>>> availablePieces = 10; 
	mov	word [availablePieces], 10
	; >>>>> Line:	212
	; >>>>> availableMoves = 10; 
	mov	word [availableMoves], 10
	; >>>>> Line:	214
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab8app_49:
	push	bp
	mov	bp, sp
	jmp	L_lab8app_50
	ALIGN	2
nextCommandPtr:
	TIMES	2 db 0
pieceQ:
	TIMES	20 db 0
pieceQPtr:
	TIMES	2 db 0
moveQ:
	TIMES	20 db 0
moveQPtr:
	TIMES	2 db 0
placement:
	TIMES	1024 db 0
communication:
	TIMES	1024 db 0
statistics:
	TIMES	1024 db 0
pieces:
	TIMES	80 db 0
availablePieces:
	TIMES	2 db 0
moves:
	TIMES	40 db 0
availableMoves:
	TIMES	2 db 0
YKEnterMutex:
	cli
	ret

YKExitMutex:
	sti
	ret

YKSaveContext:
	push	ax
	push	bx
	push	cx
	push	dx
	push	es
	push	ds
	push 	si
	push	di
	push 	bp

	mov		bp, sp
	push	word[bp+18] ;move return address to top of stack
	mov		[bp+18], cx

	mov cx, [nestingLevel]
	cmp cx, 0
	jg	YKRet

	mov bx, [YKCurTask]
	mov bp, sp
	add	bp, 2
	mov [bx], bp

YKRet:
	ret

YKDispatcher:
	
	push bp 	
	mov bp, sp	
	cmp	byte[bp+4], 0		; compare arg1 with 0
	pop bp
	je	YKDispatcherExtra ; if arg1 == 0, do the extra dispatch code.
	
	push cs
	pushf
	call YKSaveContext

	mov	bp, sp
	mov	bx, [bp+20]
	mov	ax, [bp+24]
	mov	[bp+20], ax
	or bx, 0x00200
	mov	[bp+24], bx

YKDispatcherExtra:
	mov bx, [YKRdyList]
	mov sp, [bx]
	mov	[YKCurTask], bx
	call	YKRestoreContext
	iret
	
YKRestoreContext:
	
	; pop registers
	
	mov	bp, sp
	mov cx, [bp+20]
	pop	word[bp+20]
	
	pop		bp
	pop		di
	pop		si
	pop		ds
	pop		es
	pop		dx
	pop		cx
	pop		bx
	pop		ax
	ret

YKIMRInit:
	push ax
	push bp
	mov bp, sp
	mov al, [bp+6]
	pop bp
	pop ax
	ret	align 2
SlidePiece:	; void SlidePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 0		; Slide piece operation
  	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
RotatePiece:	; void RotatePiece(int ID, int direction)
	push	bp
	mov	bp, sp
	push	ax
	push	dx
 	mov	ah, 1		; Rotate piece operation
 	mov	al, [bp+6]	; Move direction (loword only)
	mov	dx, [bp+4]	; Move id
	int	1Bh		; Call Simptris services
	pop	dx
	pop	ax
	pop	bp
	ret
SeedSimptris:	; void SeedSimptris(long seed)
	push	bp
	mov	bp, sp
	push	ax
	push	cx
	push    dx
 	mov	ah, 2		; Seed operation
	mov	dx, [bp+4]	; Move loword of seed
	mov	cx, [bp+6]	; Move hiword of seed
	int	1Bh		; Call Simptris services
	pop	dx
	pop	cx
	pop	ax
	pop	bp
	ret
StartSimptris:	; void StartSimptris(void)
	push	ax
 	mov	ah, 3		; Start Simptris operation
	int	1Bh		; Call Simptris services
	pop	ax
	ret
