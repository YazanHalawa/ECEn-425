; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	25
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	27
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	28
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	30
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	31
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	32
	; >>>>> YKCurTask = 0x0;  
	mov	word [YKCurTask], 0
	; >>>>> Line:	33
	; >>>>> YKRdyList = 0x0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	34
	; >>>>> YKSuspList = 0x0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	35
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	36
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	37
	; >>>>> YKAvaiSems = 1; 
	mov	word [YKAvaiSems], 1
	; >>>>> Line:	38
	; >>>>> YKQAvailCount = 2; 
	mov	word [YKQAvailCount], 2
	; >>>>> Line:	39
	; >>>>> YKAvaiEvents = 1; 
	mov	word [YKAvaiEvents], 1
	; >>>>> Line:	42
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	43
	; >>>>> for (i = 0; i < 3; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	44
	; >>>>> erMute 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 4
	shl	ax, cl
	add	ax, YKTCBArray
	mov	dx, word [bp-2]
	mov	cx, 4
	shl	dx, cl
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	mov	word [si], ax
	; >>>>> Line:	45
	; >>>>> YKTCBArray[3].prev = 0x0;  
	mov	word [(58+YKTCBArray)], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 3
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	47
	; >>>>> YKTCBArray[3].next = 0x0; 
	mov	word [(56+YKTCBArray)], 0
	; >>>>> Line:	48
	; >>>>> YKTCBArray[3].prev = 0x0; 
	mov	word [(58+YKTCBArray)], 0
	; >>>>> Line:	50
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100);   
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
L_yakc_8:
	DB	"in idle",0xD,0xA,0
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	53
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	54
	; >>>>> printString("in idle\r\n"); 
	mov	ax, L_yakc_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	55
	; >>>>> while(1){ 
	jmp	L_yakc_12
L_yakc_11:
	; >>>>> Line:	56
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	57
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	58
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_12:
	jmp	L_yakc_11
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
	ALIGN	2
YKNewTask:
	; >>>>> Line:	63
	; >>>>> void YKNewTask(void (* task)(void), void *stackptr, unsigned char priority){ 
	jmp	L_yakc_15
L_yakc_16:
	; >>>>> Line:	68
	; >>>>> while (iter2->priority 
	call	YKEnterMutex
	; >>>>> Line:	70
	; >>>>> insertion = YKAvailTCBList;   
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-6], ax
	; >>>>> Line:	72
	; >>>>> if(insertion == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_17
	; >>>>> Line:	73
	; >>>>> return; 
	jmp	L_yakc_18
L_yakc_17:
	; >>>>> Line:	76
	; >>>>> YKAvailTCBList =  insertion->next;    
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	78
	; >>>>> insertion->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	79
	; >>>>> insertion->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-6]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> insertion->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	81
	; >>>>> insertion->flags = 0; 
	mov	si, word [bp-6]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	82
	; >>>>> insertion->waitMode = 0; 
	mov	si, word [bp-6]
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	84
	; >>>>> if (YKRdyList == 0x0)   
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_19
	; >>>>> Line:	86
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	; >>>>> Line:	87
	; >>>>> insertion->next = 0x0; 
	mov	si, word [bp-6]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	88
	; >>>>> insertion->prev = 0x0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_20
L_yakc_19:
	; >>>>> Line:	92
	; >>>>> iter2 = YKRdyList;    
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	93
	; >>>>> while (iter2->priority 
	jmp	L_yakc_22
L_yakc_21:
	; >>>>> Line:	94
	; >>>>> iter2 = iter2->next;   
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_22:
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_21
L_yakc_23:
	; >>>>> Line:	95
	; >>>>> if (iter2->prev == 0x0)  
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_24
	; >>>>> Line:	96
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	98
	; >>>>> iter2->prev->next = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_25:
	; >>>>> Line:	99
	; >>>>> insertion->prev = iter2->prev; 
	mov	si, word [bp-8]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	100
	; >>>>> insertion->next = iter2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	101
	; >>>>> iter2->prev = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_20:
	; >>>>> Line:	103
	; >>>>> stackIter = (unsigned *)stackptr; 
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	104
	; >>>>> stackIter -=13; 
	sub	word [bp-4], 26
	; >>>>> Line:	106
	; >>>>> for(i=0; i<13; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_27
L_yakc_26:
	; >>>>> Line:	107
	; >>>>> if (i == 10) { 
	cmp	word [bp-2], 10
	jne	L_yakc_30
	; >>>>> Line:	108
	; >>>>> stackIter[i] = (unsigned)task; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_31
L_yakc_30:
	; >>>>> Line:	109
	; >>>>> } else if (i == 12) { 
	cmp	word [bp-2], 12
	jne	L_yakc_32
	; >>>>> Line:	110
	; >>>>> stackIter[i] = 0x0200;    
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 512
	jmp	L_yakc_33
L_yakc_32:
	; >>>>> Line:	112
	; >>>>> stackIter[i] = 0; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 0
L_yakc_33:
L_yakc_31:
L_yakc_29:
	inc	word [bp-2]
L_yakc_27:
	cmp	word [bp-2], 13
	jl	L_yakc_26
L_yakc_28:
	; >>>>> Line:	115
	; >>>>> insertion->stackptr = (void *)stackIter; 
	mov	si, word [bp-6]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	116
	; >>>>> if(running == 1) { 
	cmp	word [running], 1
	jne	L_yakc_34
	; >>>>> Line:	117
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_34:
	; >>>>> Line:	119
	; >>>>> YKExitMutex();  
	call	YKExitMutex
L_yakc_18:
	mov	sp, bp
	pop	bp
	ret
L_yakc_15:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_16
	ALIGN	2
YKRun:
	; >>>>> Line:	122
	; >>>>> void YKRun(){ 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	124
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	125
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	jmp	L_yakc_37
	ALIGN	2
YKScheduler:
	; >>>>> Line:	128
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	129
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	130
	; >>>>> if(YKRdyList != YKCurTask){   
	mov	ax, word [YKCurTask]
	cmp	ax, word [YKRdyList]
	je	L_yakc_41
	; >>>>> Line:	131
	; >>>>> YKCtxSwCount++;  
	inc	word [YKCtxSwCount]
	; >>>>> Line:	132
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_41:
	; >>>>> Line:	134
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	jmp	L_yakc_40
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	137
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	139
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	140
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	142
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	143
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_45
	; >>>>> Line:	144
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_45:
	; >>>>> Line:	145
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	146
	; >>>>> temp->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	149
	; >>>>> temp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	150
	; >>>>> YKSuspList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	151
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	152
	; >>>>> if (temp->next != 0x0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_46
	; >>>>> Line:	153
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_46:
	; >>>>> Line:	154
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_44
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	158
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	160
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	161
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	162
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	163
	; >>>>> while (temp != 0x0){ 
	jmp	L_yakc_51
L_yakc_50:
	; >>>>> Line:	164
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	165
	; >>>>> if (temp->delay == 0){  
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_53
	; >>>>> Line:	166
	; >>>>> temp->state = 0;  
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	167
	; >>>>> next = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	169
	; >>>>> if (temp->prev == 0x0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_54
	; >>>>> Line:	170
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	173
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_55:
	; >>>>> Line:	175
	; >>>>> if (temp->next != 0x0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_56
	; >>>>> Line:	176
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_56:
	; >>>>> Line:	179
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	180
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_58
L_yakc_57:
	; >>>>> Line:	181
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_58:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_57
L_yakc_59:
	; >>>>> Line:	183
	; >>>>> if (temp 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_60
	; >>>>> Line:	184
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_61
L_yakc_60:
	; >>>>> Line:	187
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_61:
	; >>>>> Line:	189
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	190
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	191
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	193
	; >>>>> temp = next; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	jmp	L_yakc_62
L_yakc_53:
	; >>>>> Line:	196
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_62:
L_yakc_51:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_50
L_yakc_52:
	; >>>>> Line:	199
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_49
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	202
	; >>>>> void YKEnterISR() { 
	jmp	L_yakc_64
L_yakc_65:
	; >>>>> Line:	203
	; >>>>> nestingLevel++; 
	inc	word [nestingLevel]
	mov	sp, bp
	pop	bp
	ret
L_yakc_64:
	push	bp
	mov	bp, sp
	jmp	L_yakc_65
	ALIGN	2
YKExitISR:
	; >>>>> Line:	206
	; >>>>> void YKExitISR() { 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	208
	; >>>>> nestingLevel--; 
	dec	word [nestingLevel]
	; >>>>> Line:	209
	; >>>>> if (nestingLevel == 0 && running) { 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_69
	mov	ax, word [running]
	test	ax, ax
	je	L_yakc_69
	; >>>>> Line:	210
	; >>>>> if (semaphore->val 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	jmp	L_yakc_68
L_yakc_71:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	214
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_72
L_yakc_73:
	; >>>>> Line:	215
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	216
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_74
	; >>>>> Line:	217
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	218
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_71
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	219
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_75
L_yakc_74:
	; >>>>> Line:	222
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	223
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	224
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0x0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_75:
	; >>>>> Line:	226
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	229
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_76:
	mov	sp, bp
	pop	bp
	ret
L_yakc_72:
	push	bp
	mov	bp, sp
	jmp	L_yakc_73
	ALIGN	2
YKSemPend:
	; >>>>> Line:	233
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_78
L_yakc_79:
	; >>>>> Line:	237
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	238
	; >>>>> if (semaphore->val 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_80
	; >>>>> Line:	240
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	241
	; >>>>> return; 
	jmp	L_yakc_81
L_yakc_80:
	; >>>>> Line:	244
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	246
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	247
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_82
	; >>>>> Line:	248
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_82:
	; >>>>> Line:	250
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	252
	; >>>>> if (semaphore->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_83
	; >>>>> Line:	253
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	254
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	255
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_84
L_yakc_83:
	; >>>>> Line:	258
	; >>>>> iter = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	259
	; >>>>> temp2 = 0x0; 
	mov	word [bp-4], 0
	; >>>>> Line:	260
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_86
L_yakc_85:
	; >>>>> Line:	261
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	262
	; >>>>> Bptr 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_86:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_88
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_85
L_yakc_88:
L_yakc_87:
	; >>>>> Line:	264
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_89
	; >>>>> Line:	265
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	266
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	267
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_90
L_yakc_89:
	; >>>>> Line:	270
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	271
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	272
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	273
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_91
	; >>>>> Line:	274
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_92
L_yakc_91:
	; >>>>> Line:	276
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_92:
L_yakc_90:
L_yakc_84:
	; >>>>> Line:	280
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	282
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_81:
	mov	sp, bp
	pop	bp
	ret
L_yakc_78:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_79
	ALIGN	2
YKSemPost:
	; >>>>> Line:	285
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_94
L_yakc_95:
	; >>>>> Line:	288
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	289
	; >>>>> if (semaphore->value++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_96
	; >>>>> Line:	291
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	292
	; >>>>> return; 
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	295
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	296
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	297
	; >>>>> if (semaphore->blockedOn != 0x0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_98
	; >>>>> Line:	298
	; >>>>> semaphore->blockedOn->prev = 0x0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_98:
	; >>>>> Line:	300
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	302
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	303
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_100
L_yakc_99:
	; >>>>> Line:	304
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_100:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_99
L_yakc_101:
	; >>>>> Line:	306
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_102
	; >>>>> Line:	307
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_103
L_yakc_102:
	; >>>>> Line:	310
	; >>>>> temp2->prev->ne 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_103:
	; >>>>> Line:	312
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	313
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	314
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	316
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_104
	; >>>>> Line:	317
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_104:
	; >>>>> Line:	319
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_97:
	mov	sp, bp
	pop	bp
	ret
L_yakc_94:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_95
	ALIGN	2
YKQCreate:
	; >>>>> Line:	322
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_106
L_yakc_107:
	; >>>>> Line:	323
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	324
	; >>>>> if (YKQAvailCount <= 0){ 
	cmp	word [YKQAvailCount], 0
	jg	L_yakc_108
	; >>>>> Line:	325
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	326
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_108:
	; >>>>> Line:	328
	; >>>>> YKQAvailCount--; 
	dec	word [YKQAvailCount]
	; >>>>> Line:	329
	; >>>>> YKQs[YKQAvailCount].baseAddress = (void **)start; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	mov	si, ax
	add	si, YKQs
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	330
	; >>>>> YKQs[YKQAvailCount].numOfEntries = size; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	331
	; >>>>> YKQs[YKQAvailCount].addLoc = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	332
	; >>>>> YKQs[YKQAvailCount].removeLoc  
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	333
	; >>>>> YKQs[YKQAvailCount].blockedOn = 0x0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	334
	; >>>>> YKQs[YKQAvailCount].numOfMsgs = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	335
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	336
	; >>>>> return &(YKQs[YKQAvailCount]); 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
L_yakc_109:
	mov	sp, bp
	pop	bp
	ret
L_yakc_106:
	push	bp
	mov	bp, sp
	jmp	L_yakc_107
	ALIGN	2
YKQPend:
	; >>>>> Line:	339
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_112
L_yakc_113:
L_yakc_111:
	; >>>>> Line:	343
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	344
	; >>>>> if (queue->numOfMsgs > 0){  
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jle	L_yakc_114
	; >>>>> Line:	346
	; >>>>> tempMsg = queue->baseAddress[queue->removeLoc]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	347
	; >>>>> queue->removeLoc++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	349
	; >>>>> if (queue->removeLoc >= queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_115
	; >>>>> Line:	350
	; >>>>> queue->removeLoc = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_115:
	; >>>>> Line:	352
	; >>>>> queue->numOfMsgs--; 
	mov	si, word [bp+4]
	add	si, 10
	dec	word [si]
	jmp	L_yakc_116
L_yakc_114:
	; >>>>> Line:	356
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	358
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	359
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_117
	; >>>>> Line:	360
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_117:
	; >>>>> Line:	362
	; >>>>> temp->state = 2; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	364
	; >>>>> if (queue->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_118
	; >>>>> Line:	365
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	366
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	367
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_119
L_yakc_118:
	; >>>>> Line:	370
	; >>>>> iter = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	371
	; >>>>> temp2 = 0x0; 
	mov	word [bp-6], 0
	; >>>>> Line:	372
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_121
L_yakc_120:
	; >>>>> Line:	373
	; >>>>> } 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
	; >>>>> Line:	374
	; >>>>> iter = iter->next; 
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_121:
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_123
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_120
L_yakc_123:
L_yakc_122:
	; >>>>> Line:	376
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_124
	; >>>>> Line:	377
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	378
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	379
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_125
L_yakc_124:
	; >>>>> Line:	382
	; >>>>> temp->next = iter; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	383
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	384
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	385
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_126
	; >>>>> Line:	386
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_127
L_yakc_126:
	; >>>>> Line:	388
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_127:
L_yakc_125:
L_yakc_119:
	; >>>>> Line:	391
	; >>>>> queue->blocked 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	392
	; >>>>> goto TOP; 
	jmp	L_yakc_111
L_yakc_116:
	; >>>>> Line:	394
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	395
	; >>>>> return tempMsg; 
	mov	ax, word [bp-2]
L_yakc_128:
	mov	sp, bp
	pop	bp
	ret
L_yakc_112:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_113
	ALIGN	2
YKQPost:
	; >>>>> Line:	399
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_130
L_yakc_131:
	; >>>>> Line:	401
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	402
	; >>>>> if (queue->numOfMsgs < queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_132
	; >>>>> Line:	403
	; >>>>> queue->baseAddress[queue->addLoc] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	405
	; >>>>> queue->addLoc++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	407
	; >>>>> if (queue->addLoc >= queue->numOfEntries) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_133
	; >>>>> Line:	408
	; >>>>> queue->addLoc = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
L_yakc_133:
	; >>>>> Line:	409
	; >>>>> queue->numOfMsgs++; 
	mov	si, word [bp+4]
	add	si, 10
	inc	word [si]
	; >>>>> Line:	411
	; >>>>> if (queue->blockedOn != 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_134
	; >>>>> Line:	412
	; >>>>> temp = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	413
	; >>>>> queue->blocked 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	414
	; >>>>> if (queue->blockedOn != 0x0) 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_135
	; >>>>> Line:	415
	; >>>>> queue->blockedOn->prev = 0x0;  
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_135:
	; >>>>> Line:	417
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	419
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	420
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_137
L_yakc_136:
	; >>>>> Line:	421
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_137:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_136
L_yakc_138:
	; >>>>> Line:	423
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_139
	; >>>>> Line:	424
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_140
L_yakc_139:
	; >>>>> Line:	427
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_140:
	; >>>>> Line:	429
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	430
	; >>>>> temp->n 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	431
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	433
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_141
	; >>>>> Line:	434
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_141:
L_yakc_134:
	; >>>>> Line:	437
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	438
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_142
	jmp	L_yakc_143
L_yakc_132:
	; >>>>> Line:	441
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	442
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_143:
L_yakc_142:
	mov	sp, bp
	pop	bp
	ret
L_yakc_130:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_131
L_yakc_145:
	DB	"not enough events",0xA,0
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	447
	; >>>>> YKEVENT *YKEventCreate(unsigned initialValue){ 
	jmp	L_yakc_146
L_yakc_147:
	; >>>>> Line:	448
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	449
	; >>>>> if (YKAvaiEvents <= 0){ 
	cmp	word [YKAvaiEvents], 0
	jg	L_yakc_148
	; >>>>> Line:	450
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	451
	; >>>>> printString("not enough events\n"); 
	mov	ax, L_yakc_145
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	452
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_148:
	; >>>>> Line:	454
	; >>>>> YKAvaiEvents--; 
	dec	word [YKAvaiEvents]
	; >>>>> Line:	455
	; >>>>> YKEvents[YKAvaiEvents].flags = initialValue 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKEvents
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	456
	; >>>>> YKEvents[YKAvaiEvents].waitingOn = 0x0; 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEvents
	mov	si, ax
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	457
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	458
	; >>>>> return &(YKEvents[YKAvaiEvents]); 
	mov	ax, word [YKAvaiEvents]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEvents
L_yakc_149:
	mov	sp, bp
	pop	bp
	ret
L_yakc_146:
	push	bp
	mov	bp, sp
	jmp	L_yakc_147
	ALIGN	2
checkConditions:
	; >>>>> Line:	461
	; >>>>> int checkConditions(unsigned eventFlags, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_151
L_yakc_152:
	; >>>>> Line:	464
	; >>>>> if (waitMode == 1){ 
	mov	word [bp-2], 0
	; >>>>> Line:	464
	; >>>>> if (waitMode == 1){ 
	cmp	word [bp+8], 1
	jne	L_yakc_153
	; >>>>> Line:	465
	; >>>>> conditionMet = 1; 
	mov	word [bp-2], 1
	; >>>>> Line:	467
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-4], 0
	jmp	L_yakc_155
L_yakc_154:
	; >>>>> Line:	468
	; >>>>> if ((eventMask & (1 << i))){ 
	mov	ax, 1
	mov	cx, word [bp-4]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_158
	; >>>>> Line:	469
	; >>>>> if (!(eventFlags & (1 << i))){ 
	mov	ax, 1
	shl	ax, cl
	and	ax, word [bp+4]
	jne	L_yakc_159
	; >>>>> Line:	470
	; >>>>> conditionMet = 0; 
	mov	word [bp-2], 0
L_yakc_159:
L_yakc_158:
L_yakc_157:
	inc	word [bp-4]
L_yakc_155:
	cmp	word [bp-4], 16
	jl	L_yakc_154
L_yakc_156:
	jmp	L_yakc_160
L_yakc_153:
	; >>>>> Line:	475
	; >>>>> else if (waitMode == 0 
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_161
	; >>>>> Line:	476
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-4], 0
	jmp	L_yakc_163
L_yakc_162:
	; >>>>> Line:	477
	; >>>>> if (eventMask & (1 << i)){ 
	mov	ax, 1
	mov	cx, word [bp-4]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_166
	; >>>>> Line:	478
	; >>>>> if (eventFlags & (1 << i)){ 
	mov	ax, 1
	shl	ax, cl
	and	ax, word [bp+4]
	je	L_yakc_167
	; >>>>> Line:	479
	; >>>>> conditionMet = 1; 
	mov	word [bp-2], 1
	; >>>>> Line:	480
	; >>>>> break; 
	jmp	L_yakc_164
L_yakc_167:
L_yakc_166:
L_yakc_165:
	inc	word [bp-4]
L_yakc_163:
	cmp	word [bp-4], 16
	jl	L_yakc_162
L_yakc_164:
	jmp	L_yakc_168
L_yakc_161:
	; >>>>> Line:	486
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_168:
L_yakc_160:
	; >>>>> Line:	488
	; >>>>> return conditionMet; 
	mov	ax, word [bp-2]
L_yakc_169:
	mov	sp, bp
	pop	bp
	ret
L_yakc_151:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_152
	ALIGN	2
YKEventPend:
	; >>>>> Line:	491
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode){ 
	jmp	L_yakc_171
L_yakc_172:
	; >>>>> Line:	496
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	496
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	498
	; >>>>> conditionMet = checkConditi 
	push	word [bp+8]
	push	word [bp+6]
	mov	si, word [bp+4]
	push	word [si]
	call	checkConditions
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	501
	; >>>>> if (conditionMet){ 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_173
	; >>>>> Line:	502
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	503
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	504
	; >>>>> return flags; 
	mov	ax, word [bp-6]
	jmp	L_yakc_174
	jmp	L_yakc_175
L_yakc_173:
	; >>>>> Line:	508
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	510
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	511
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_176
	; >>>>> Line:	512
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_176:
	; >>>>> Line:	514
	; >>>>> temp->state = 2; 
	mov	si, word [bp-8]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	515
	; >>>>> temp->flags = eventMask; 
	mov	si, word [bp-8]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	516
	; >>>>> temp->waitMode = waitMode; 
	mov	si, word [bp-8]
	add	si, 14
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	518
	; >>>>> if (event->waitingOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_177
	; >>>>> Line:	519
	; >>>>> event->waitingOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	520
	; >>>>> temp->next  
	mov	si, word [bp-8]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	521
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-8]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_178
L_yakc_177:
	; >>>>> Line:	524
	; >>>>> iter = event->waitingOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-12], ax
	; >>>>> Line:	525
	; >>>>> temp2 = 0x0; 
	mov	word [bp-10], 0
	; >>>>> Line:	526
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_180
L_yakc_179:
	; >>>>> Line:	527
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-12]
	mov	word [bp-10], ax
	; >>>>> Line:	528
	; >>>>> iter = iter->next; 
	mov	si, word [bp-12]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-12], ax
L_yakc_180:
	mov	ax, word [bp-12]
	test	ax, ax
	je	L_yakc_182
	mov	si, word [bp-12]
	add	si, 4
	mov	di, word [bp-8]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_179
L_yakc_182:
L_yakc_181:
	; >>>>> Line:	530
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-12]
	test	ax, ax
	jne	L_yakc_183
	; >>>>> Line:	531
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	532
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	533
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-8]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_184
L_yakc_183:
	; >>>>> Line:	536
	; >>>>> temp->next = iter; 
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [bp-12]
	mov	word [si], ax
	; >>>>> Line:	537
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-10]
	mov	word [si], ax
	; >>>>> Line:	538
	; >>>>> (ev 
	mov	si, word [bp-12]
	add	si, 10
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	539
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-10]
	test	ax, ax
	jne	L_yakc_185
	; >>>>> Line:	540
	; >>>>> event->waitingOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-8]
	mov	word [si], ax
	jmp	L_yakc_186
L_yakc_185:
	; >>>>> Line:	542
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
L_yakc_186:
L_yakc_184:
L_yakc_178:
	; >>>>> Line:	545
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	546
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	547
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_175:
	; >>>>> Line:	549
	; >>>>> return flags; 
	mov	ax, word [bp-6]
L_yakc_174:
	mov	sp, bp
	pop	bp
	ret
L_yakc_171:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_yakc_172
	ALIGN	2
YKEventSet:
	; >>>>> Line:	552
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_188
L_yakc_189:
	; >>>>> Line:	557
	; >>>>> YKEnterMutex(); 
	mov	word [bp-4], 0
	; >>>>> Line:	557
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	559
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_191
L_yakc_190:
	; >>>>> Line:	560
	; >>>>> if (ev 
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_194
	; >>>>> Line:	561
	; >>>>> event->flags |= (1 << i); 
	mov	si, word [bp+4]
	mov	ax, 1
	shl	ax, cl
	or	word [si], ax
L_yakc_194:
L_yakc_193:
	inc	word [bp-2]
L_yakc_191:
	cmp	word [bp-2], 16
	jl	L_yakc_190
L_yakc_192:
	; >>>>> Line:	564
	; >>>>> flags = event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-14], ax
	; >>>>> Line:	566
	; >>>>> iter = event->waitingOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	567
	; >>>>> while (iter != 0x0){ 
	jmp	L_yakc_196
L_yakc_195:
	; >>>>> Line:	569
	; >>>>> if (checkConditions(flags, iter->flags, iter->waitMode)){ 
	mov	si, word [bp-6]
	add	si, 14
	push	word [si]
	mov	si, word [bp-6]
	add	si, 12
	push	word [si]
	push	word [bp-14]
	call	checkConditions
	add	sp, 6
	test	ax, ax
	je	L_yakc_198
	; >>>>> Line:	571
	; >>>>> next = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-12], ax
	; >>>>> Line:	573
	; >>>>> if (iter == event->waitingOn){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jne	L_yakc_199
	; >>>>> Line:	574
	; >>>>> event->waitingOn = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_199:
	; >>>>> Line:	576
	; >>>>> if (iter->prev != 0x0) 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_200
	; >>>>> Line:	577
	; >>>>> iter->prev->next = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	di, word [bp-6]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_200:
	; >>>>> Line:	578
	; >>>>> if (iter->next != 0x0) 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_201
	; >>>>> Line:	579
	; >>>>> iter->next->prev = iter->prev; 
	mov	si, word [bp-6]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_201:
	; >>>>> Line:	581
	; >>>>> iter->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	583
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-10], ax
	; >>>>> Line:	584
	; >>>>> while (temp2->priority < iter->priority){ 
	jmp	L_yakc_203
L_yakc_202:
	; >>>>> Line:	585
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-10]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-10], ax
L_yakc_203:
	mov	si, word [bp-10]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_202
L_yakc_204:
	; >>>>> Line:	587
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-10]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_205
	; >>>>> Line:	588
	; >>>>> YKRdyList = iter; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_206
L_yakc_205:
	; >>>>> Line:	591
	; >>>>> temp2->prev->next = iter; 
	mov	si, word [bp-10]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_206:
	; >>>>> Line:	593
	; >>>>> iter->prev = temp2->prev; 
	mov	si, word [bp-10]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	594
	; >>>>> iter->next = temp2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-10]
	mov	word [si], ax
	; >>>>> Line:	595
	; >>>>> temp2->prev = iter; 
	mov	si, word [bp-10]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	596
	; >>>>>  
	mov	word [bp-4], 1
	; >>>>> Line:	597
	; >>>>> iter = next; 
	mov	ax, word [bp-12]
	mov	word [bp-6], ax
	jmp	L_yakc_207
L_yakc_198:
	; >>>>> Line:	599
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_207:
L_yakc_196:
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_195
L_yakc_197:
	; >>>>> Line:	603
	; >>>>> if (taskMadeReady && nestingLevel == 0) 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_208
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_208
	; >>>>> Line:	604
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_208:
	; >>>>> Line:	605
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_188:
	push	bp
	mov	bp, sp
	sub	sp, 14
	jmp	L_yakc_189
	ALIGN	2
YKEventReset:
	; >>>>> Line:	608
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_210
L_yakc_211:
	; >>>>> Line:	610
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	611
	; >>>>> for (i = 0; i < 16; i++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_213
L_yakc_212:
	; >>>>> Line:	613
	; >>>>> if (eventMask & (1 << i)){ 
	mov	ax, 1
	mov	cx, word [bp-2]
	shl	ax, cl
	and	ax, word [bp+6]
	je	L_yakc_216
	; >>>>> Line:	614
	; >>>>> event->flags &= ~((1 << i)); 
	mov	si, word [bp+4]
	mov	ax, 1
	shl	ax, cl
	not	ax
	and	word [si], ax
L_yakc_216:
L_yakc_215:
	inc	word [bp-2]
L_yakc_213:
	cmp	word [bp-2], 16
	jl	L_yakc_212
L_yakc_214:
	; >>>>> Line:	617
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_210:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_211
	ALIGN	2
YKTickNum:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	64 db 0
running:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
nestingLevel:
	TIMES	2 db 0
YKQAvailCount:
	TIMES	2 db 0
YKQs:
	TIMES	24 db 0
YKSems:
	TIMES	4 db 0
YKAvaiSems:
	TIMES	2 db 0
YKEvents:
	TIMES	4 db 0
YKAvaiEvents:
	TIMES	2 db 0
