        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset ; Reset               ; Int 08h (IRQ 0)
        dd      tick ; Tick                ; Int 09h (IRQ 1)
        dd      keyboard ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

reset:
	call	reset_inth

tick:
	call	YKSaveContext
	call	YKEnterISR

	sti 			; enable interrupts
	call	mytick
	call	YKTickHandler
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret

keyboard:
	call	YKSaveContext
	call	YKEnterISR

	sti				; enable interrupts
	call	keyboard_inth
	cli 			; disable interrupts

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	call	YKExitISR
	call	YKRestoreContext
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
reset_inth:
	; >>>>> Line:	16
	; >>>>> { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	17
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
	ALIGN	2
L_myinth_4:
	DW	0
L_myinth_5:
	DW	0
L_myinth_6:
	DB	"  TickISR: queue overflow! ",0xA,0
	ALIGN	2
mytick:
	; >>>>> Line:	21
	; >>>>> { 
	jmp	L_myinth_7
L_myinth_8:
	; >>>>> Line:	26
	; >>>>> MsgArray[next].tick = YKTickNum; 
	mov	ax, word [L_myinth_4]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, MsgArray
	mov	ax, word [YKTickNum]
	mov	word [si], ax
	; >>>>> Line:	27
	; >>>>> data = (data + 89) % 100; 
	mov	ax, word [L_myinth_5]
	add	ax, 89
	cwd
	mov	cx, 100
	idiv	cx
	mov	ax, dx
	mov	word [L_myinth_5], ax
	; >>>>> Line:	28
	; >>>>> MsgArray[next].data = data; 
	mov	ax, word [L_myinth_4]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	mov	si, ax
	add	si, 2
	mov	ax, word [L_myinth_5]
	mov	word [si], ax
	; >>>>> Line:	29
	; >>>>> if (YKQPost(MsgQPtr, (void *) &(MsgArray[next])) == 0) 
	mov	ax, word [L_myinth_4]
	shl	ax, 1
	shl	ax, 1
	add	ax, MsgArray
	push	ax
	push	word [MsgQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_myinth_9
	; >>>>> Line:	30
	; >>>>> printString("  TickISR: queue overflow! \n"); 
	mov	ax, L_myinth_6
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_10
L_myinth_9:
	; >>>>> Line:	31
	; >>>>> else if (++next >= 20) 
	mov	ax, word [L_myinth_4]
	inc	ax
	mov	word [L_myinth_4], ax
	cmp	ax, 20
	jl	L_myinth_11
	; >>>>> Line:	32
	; >>>>> next = 0; 
	mov	word [L_myinth_4], 0
L_myinth_11:
L_myinth_10:
	mov	sp, bp
	pop	bp
	ret
L_myinth_7:
	push	bp
	mov	bp, sp
	jmp	L_myinth_8
	ALIGN	2
keyboard_inth:
	; >>>>> Line:	36
	; >>>>> { 
	jmp	L_myinth_13
L_myinth_14:
	; >>>>> Line:	37
	; >>>>> GlobalFlag = 1; 
	mov	word [GlobalFlag], 1
	mov	sp, bp
	pop	bp
	ret
L_myinth_13:
	push	bp
	mov	bp, sp
	jmp	L_myinth_14
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKInitialize:
	; >>>>> Line:	22
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	24
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	25
	; >>>>> YKIMRInit(0x00); 
	xor	ax, ax
	push	ax
	call	YKIMRInit
	add	sp, 2
	; >>>>> Line:	26
	; >>>>> running = 0; 
	mov	word [running], 0
	; >>>>> Line:	27
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	28
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	29
	; >>>>> YKCurTask = 0x0;  
	mov	word [YKCurTask], 0
	; >>>>> Line:	30
	; >>>>> YKRdyList = 0x0; 
	mov	word [YKRdyList], 0
	; >>>>> Line:	31
	; >>>>> YKSuspList = 0x0; 
	mov	word [YKSuspList], 0
	; >>>>> Line:	32
	; >>>>> nestingLevel = 0; 
	mov	word [nestingLevel], 0
	; >>>>> Line:	33
	; >>>>> YKTickNum = 0; 
	mov	word [YKTickNum], 0
	; >>>>> Line:	34
	; >>>>> YKAvaiSems = 4; 
	mov	word [YKAvaiSems], 4
	; >>>>> Line:	35
	; >>>>> YKQAvailCount = 1; 
	mov	word [YKQAvailCount], 1
	; >>>>> Line:	38
	; >>>>> YKAvailTCBList = &(YKTCBArray[0]); 
	mov	word [YKAvailTCBList], YKTCBArray
	; >>>>> Line:	39
	; >>>>> for (i = 0 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	40
	; >>>>> YKTCBArray[i].next = &(YKTCBArray[i+1]); 
	mov	ax, word [bp-2]
	inc	ax
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	41
	; >>>>> YKTCBArray[3].prev = 0x0;  
	mov	word [(46+YKTCBArray)], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 3
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	43
	; >>>>> YKTCBArray[3].next = 0x0; 
	mov	word [(44+YKTCBArray)], 0
	; >>>>> Line:	44
	; >>>>> YKTCBArray[3].prev = 0x0; 
	mov	word [(46+YKTCBArray)], 0
	; >>>>> Line:	46
	; >>>>> YKNewTask(YKIdleTask,(void *) &(idleStk[2048]),100);   
	mov	al, 100
	push	ax
	mov	ax, (idleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	49
	; >>>>> void YKIdleTask(){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	50
	; >>>>> while(1){ 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	51
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	52
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	53
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	58
	; >>>>> void YKNewTask(void (* task)(void), void *stackptr, unsigned char priority){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	63
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	65
	; >>>>>  
	mov	ax, word [YKAvailTCBList]
	mov	word [bp-6], ax
	; >>>>> Line:	67
	; >>>>> if(insertion == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_16
	; >>>>> Line:	68
	; >>>>> return; 
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	71
	; >>>>> YKAvailTCBList =  insertion->next;    
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKAvailTCBList], ax
	; >>>>> Line:	73
	; >>>>> insertion->state = 0; 
	mov	si, word [bp-6]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	74
	; >>>>> insertion->priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	mov	si, word [bp-6]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	75
	; >>>>> insertion->delay = 0; 
	mov	si, word [bp-6]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	77
	; >>>>> if (YKRdyList == 0x0)   
	mov	ax, word [YKRdyList]
	test	ax, ax
	jne	L_yakc_18
	; >>>>> Line:	79
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	; >>>>> Line:	80
	; >>>>> insertion->next = 0x0; 
	mov	si, word [bp-6]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	81
	; >>>>> insertion->prev = 0x0; 
	mov	si, word [bp-6]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	85
	; >>>>> iter2 = YKRdyList;    
	mov	ax, word [YKRdyList]
	mov	word [bp-8], ax
	; >>>>> Line:	86
	; >>>>> while (iter2->priority < insertion->priority) 
	jmp	L_yakc_21
L_yakc_20:
	; >>>>> Line:	87
	; >>>>> iter2 = iter2->next;   
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_21:
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_20
L_yakc_22:
	; >>>>> Line:	88
	; >>>>> }  
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_23
	; >>>>> Line:	89
	; >>>>> YKRdyList = insertion; 
	mov	ax, word [bp-6]
	mov	word [YKRdyList], ax
	jmp	L_yakc_24
L_yakc_23:
	; >>>>> Line:	91
	; >>>>> iter2->prev->next = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_24:
	; >>>>> Line:	92
	; >>>>> insertion->prev = iter2->prev; 
	mov	si, word [bp-8]
	add	si, 10
	mov	di, word [bp-6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	93
	; >>>>> insertion->next = iter2; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	94
	; >>>>> iter2->prev = insertion; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
L_yakc_19:
	; >>>>> Line:	96
	; >>>>> stackIter = (unsigned *)stackptr; 
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	; >>>>> Line:	97
	; >>>>> stackIter -=13; 
	sub	word [bp-4], 26
	; >>>>> Line:	99
	; >>>>> for(i=0; i<13; i++) { 
	mov	word [bp-2], 0
	jmp	L_yakc_26
L_yakc_25:
	; >>>>> Line:	100
	; >>>>> if (i == 10) { 
	cmp	word [bp-2], 10
	jne	L_yakc_29
	; >>>>> Line:	101
	; >>>>> stackIter[i] = (unsigned)task; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	jmp	L_yakc_30
L_yakc_29:
	; >>>>> Line:	102
	; >>>>> } else if (i == 12) { 
	cmp	word [bp-2], 12
	jne	L_yakc_31
	; >>>>> Line:	103
	; >>>>> stackIter[i] = 0x0200;    
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 512
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	105
	; >>>>> stackIter[i] = 0; 
	mov	ax, word [bp-2]
	shl	ax, 1
	mov	si, ax
	add	si, word [bp-4]
	mov	word [si], 0
L_yakc_32:
L_yakc_30:
L_yakc_28:
	inc	word [bp-2]
L_yakc_26:
	cmp	word [bp-2], 13
	jl	L_yakc_25
L_yakc_27:
	; >>>>> Line:	108
	; >>>>> insertion->stackptr = (void *)stackIter; 
	mov	si, word [bp-6]
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> if(running == 1) { 
	cmp	word [running], 1
	jne	L_yakc_33
	; >>>>> Line:	110
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_33:
	; >>>>> Line:	112
	; >>>>> YKExitMutex();  
	call	YKExitMutex
L_yakc_17:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_15
	ALIGN	2
YKRun:
	; >>>>> Line:	115
	; >>>>> void YKRun(){ 
	jmp	L_yakc_35
L_yakc_36:
	; >>>>> Line:	117
	; >>>>> running = 1; 
	mov	word [running], 1
	; >>>>> Line:	118
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_35:
	push	bp
	mov	bp, sp
	jmp	L_yakc_36
	ALIGN	2
YKScheduler:
	; >>>>> Line:	121
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_38
L_yakc_39:
	; >>>>> Line:	122
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	123
	; >>>>> if(YKRdyList != YKCurTask){   
	mov	ax, word [YKCurTask]
	cmp	ax, word [YKRdyList]
	je	L_yakc_40
	; >>>>> Line:	124
	; >>>>> YKCtxSwCount++;  
	inc	word [YKCtxSwCount]
	; >>>>> Line:	125
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_40:
	; >>>>> Line:	127
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_38:
	push	bp
	mov	bp, sp
	jmp	L_yakc_39
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	130
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	132
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	133
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	135
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	136
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_44
	; >>>>> Line:	137
	; >>>>> t;  
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_44:
	; >>>>> Line:	138
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	139
	; >>>>> temp->delay = count; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	142
	; >>>>> temp->next = YKSuspList; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [YKSuspList]
	mov	word [si], ax
	; >>>>> Line:	143
	; >>>>> YKSuspList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKSuspList], ax
	; >>>>> Line:	144
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	145
	; >>>>> if (temp->next != 0x0) 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_45
	; >>>>> Line:	146
	; >>>>> temp->next->prev = temp; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_45:
	; >>>>> Line:	147
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	148
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_43
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	151
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_47
L_yakc_48:
	; >>>>> Line:	153
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	154
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	155
	; >>>>> temp = YKSuspList; 
	mov	ax, word [YKSuspList]
	mov	word [bp-2], ax
	; >>>>> Line:	156
	; >>>>> while (temp != 0x0){ 
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	157
	; >>>>> temp->delay--; 
	mov	si, word [bp-2]
	add	si, 6
	dec	word [si]
	; >>>>> Line:	158
	; >>>>> if (temp->delay == 0){  
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_52
	; >>>>> Line:	159
	; >>>>> temp->state = 0;  
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	160
	; >>>>> next = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	162
	; >>>>> if (temp->prev == 0x0){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_53
	; >>>>> Line:	163
	; >>>>> YKSuspList = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKSuspList], ax
	jmp	L_yakc_54
L_yakc_53:
	; >>>>> Line:	166
	; >>>>> temp->prev->next = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp-2]
	add	di, 10
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_54:
	; >>>>> Line:	168
	; >>>>> if (temp->next != 0x0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_55
	; >>>>> Line:	169
	; >>>>> temp->next->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 8
	mov	di, word [di]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_55:
	; >>>>> Line:	172
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	173
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_57
L_yakc_56:
	; >>>>> Line:	174
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_57:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_56
L_yakc_58:
	; >>>>> Line:	176
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_59
	; >>>>> Line:	177
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	180
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_60:
	; >>>>> Line:	182
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	183
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	184
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	186
	; >>>>> temp = next; 
	mov	ax, word [bp-6]
	mov	word [bp-2], ax
	jmp	L_yakc_61
L_yakc_52:
	; >>>>> Line:	189
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_61:
L_yakc_50:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_49
L_yakc_51:
	; >>>>> Line:	192
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_47:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_48
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	195
	; >>>>> void YKEnterISR() { 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	196
	; >>>>> nestingLevel++; 
	inc	word [nestingLevel]
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	jmp	L_yakc_64
	ALIGN	2
YKExitISR:
	; >>>>> Line:	199
	; >>>>> void YKExitISR() { 
	jmp	L_yakc_66
L_yakc_67:
	; >>>>> Line:	201
	; >>>>> nestingLevel--; 
	dec	word [nestingLevel]
	; >>>>> Line:	202
	; >>>>> if (nestingLevel == 0 && running) { 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_68
	mov	ax, word [running]
	test	ax, ax
	je	L_yakc_68
	; >>>>> Line:	203
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_68:
	mov	sp, bp
	pop	bp
	ret
L_yakc_66:
	push	bp
	mov	bp, sp
	jmp	L_yakc_67
L_yakc_70:
	DB	"Not enough sems",0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	207
	; >>>>> YKSEM* YKSemCreate(int initialValue){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	208
	; >>>>> return; 
	call	YKEnterMutex
	; >>>>> Line:	209
	; >>>>> if (YKAvaiSems <= 0){ 
	cmp	word [YKAvaiSems], 0
	jg	L_yakc_73
	; >>>>> Line:	210
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	211
	; >>>>> printString("Not enough sems"); 
	mov	ax, L_yakc_70
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	212
	; >>>>> exit(0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
	jmp	L_yakc_74
L_yakc_73:
	; >>>>> Line:	215
	; >>>>> YKAvaiSems--; 
	dec	word [YKAvaiSems]
	; >>>>> Line:	216
	; >>>>> YKSems[YKAvaiSems].value = initialValue; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	mov	si, ax
	add	si, YKSems
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	217
	; >>>>> YKSems[YKAvaiSems].blockedOn = 0x0; 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
	mov	si, ax
	add	si, 2
	mov	word [si], 0
L_yakc_74:
	; >>>>> Line:	219
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	222
	; >>>>> return (&(YKSems[YKAvaiSems])); 
	mov	ax, word [YKAvaiSems]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKSems
L_yakc_75:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKSemPend:
	; >>>>> Line:	226
	; >>>>> void YKSemPend(YKSEM *semaphore){ 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	230
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	231
	; >>>>> if (semaphore->value-- > 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_79
	; >>>>> Line:	233
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	234
	; >>>>> return; 
	jmp	L_yakc_80
L_yakc_79:
	; >>>>> Line:	237
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-2], ax
	; >>>>> Line:	239
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	240
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_81
	; >>>>> Line:	241
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_81:
	; >>>>> Line:	243
	; >>>>> temp->state = 2; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	245
	; >>>>> if (semaphore->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_82
	; >>>>> Line:	246
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	247
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	248
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-2]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_83
L_yakc_82:
	; >>>>> Line:	251
	; >>>>> iter = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
	; >>>>> Line:	252
	; >>>>> temp2 = 0x0; 
	mov	word [bp-4], 0
	; >>>>> Line:	253
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	254
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-6]
	mov	word [bp-4], ax
	; >>>>> Line:	255
	; >>>>> iter = iter->next; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-6], ax
L_yakc_85:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_yakc_87
	mov	si, word [bp-6]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_84
L_yakc_87:
L_yakc_86:
	; >>>>> Line:	257
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_88
	; >>>>> Line:	258
	; >>>>> ue+ 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	259
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	260
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-2]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_89
L_yakc_88:
	; >>>>> Line:	263
	; >>>>> temp->next = iter; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	264
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	265
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-6]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	266
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_90
	; >>>>> Line:	267
	; >>>>> semaphore->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-2]
	mov	word [si], ax
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	269
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_91:
L_yakc_89:
L_yakc_83:
	; >>>>> Line:	273
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	275
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	278
	; >>>>> void YKSemPost(YKSEM *semaphore){ 
	jmp	L_yakc_93
L_yakc_94:
	; >>>>> Line:	281
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	282
	; >>>>> if (semaphore->value+ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_95
	; >>>>> Line:	284
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	285
	; >>>>> return; 
	jmp	L_yakc_96
L_yakc_95:
	; >>>>> Line:	288
	; >>>>> temp = semaphore->blockedOn; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	289
	; >>>>> semaphore->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	290
	; >>>>> if (semaphore->blockedOn != 0x0) 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_97
	; >>>>> Line:	291
	; >>>>> semaphore->blockedOn->prev = 0x0; 
	mov	si, word [bp+4]
	add	si, 2
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_97:
	; >>>>> Line:	293
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	295
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	296
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_99
L_yakc_98:
	; >>>>> Line:	297
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_99:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_98
L_yakc_100:
	; >>>>> Line:	299
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	; >>>>> Line:	300
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_102
L_yakc_101:
	; >>>>> Line:	303
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_102:
	; >>>>> Line:	305
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	306
	; >>>>> temp->next =  
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	307
	; >>>>> temp2->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	309
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_103
	; >>>>> Line:	310
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_103:
	; >>>>> Line:	312
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_96:
	mov	sp, bp
	pop	bp
	ret
L_yakc_93:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_94
	ALIGN	2
YKQCreate:
	; >>>>> Line:	315
	; >>>>> YKQ *YKQCreate(void **start, unsigned size){ 
	jmp	L_yakc_105
L_yakc_106:
	; >>>>> Line:	317
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	318
	; >>>>> if (YKQAvailCount <= 0){ 
	cmp	word [YKQAvailCount], 0
	jg	L_yakc_107
	; >>>>> Line:	319
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	320
	; >>>>> exit (0xff); 
	mov	al, 255
	push	ax
	call	exit
	add	sp, 2
L_yakc_107:
	; >>>>> Line:	322
	; >>>>> YKQAvailCount--; 
	dec	word [YKQAvailCount]
	; >>>>> Line:	323
	; >>>>> YKQs[YKQAvailCount].baseAddress = (void **)start; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	mov	si, ax
	add	si, YKQs
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	324
	; >>>>> YKQs[YKQAvailCount].numOfEntries = size; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	325
	; >>>>> YKQs[YKQAvailCount].addLoc = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	326
	; >>>>> YKQs[YKQAvailCount].removeLoc = 0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	327
	; >>>>> YKQs[YKQAvailCount].blockedOn = 0x0; 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	328
	; >>>>> ;  
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	329
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	330
	; >>>>> return &(YKQs[YKQAvailCount]); 
	mov	ax, word [YKQAvailCount]
	mov	cx, 12
	imul	cx
	add	ax, YKQs
L_yakc_108:
	mov	sp, bp
	pop	bp
	ret
L_yakc_105:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_106
	ALIGN	2
YKQPend:
	; >>>>> Line:	333
	; >>>>> void *YKQPend(YKQ *queue){ 
	jmp	L_yakc_111
L_yakc_112:
L_yakc_110:
	; >>>>> Line:	337
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	338
	; >>>>> if (queue->numOfMsgs > 0){  
	mov	si, word [bp+4]
	add	si, 10
	cmp	word [si], 0
	jle	L_yakc_113
	; >>>>> Line:	340
	; >>>>> tempMsg = queue->baseAddress[queue->removeLoc]; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	341
	; >>>>> queue->removeLoc++; 
	mov	si, word [bp+4]
	add	si, 6
	inc	word [si]
	; >>>>> Line:	343
	; >>>>> if (queue->removeLoc >= queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_114
	; >>>>> Line:	344
	; >>>>> queue->removeLoc = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_114:
	; >>>>> Line:	346
	; >>>>> queue->numOfMsgs--; 
	mov	si, word [bp+4]
	add	si, 10
	dec	word [si]
	jmp	L_yakc_115
L_yakc_113:
	; >>>>> Line:	350
	; >>>>> temp = YKRdyList;  
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	352
	; >>>>> YKRdyList = temp->next;  
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [YKRdyList], ax
	; >>>>> Line:	353
	; >>>>> if (YKRdyList != 0x0) 
	mov	ax, word [YKRdyList]
	test	ax, ax
	je	L_yakc_116
	; >>>>> Line:	354
	; >>>>> YKRdyList->prev = 0x0; 
	mov	si, word [YKRdyList]
	add	si, 10
	mov	word [si], 0
L_yakc_116:
	; >>>>> Line:	356
	; >>>>> temp->state = 2; 
	mov	si, word [bp-4]
	add	si, 2
	mov	word [si], 2
	; >>>>> Line:	358
	; >>>>> if (queue->blockedOn == 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_117
	; >>>>> Line:	359
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	360
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	361
	; >>>>> temp->prev = 0x0; 
	mov	si, word [bp-4]
	add	si, 10
	mov	word [si], 0
	jmp	L_yakc_118
L_yakc_117:
	; >>>>> Line:	364
	; >>>>> iter = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	365
	; >>>>> temp2 = 0x0; 
	mov	word [bp-6], 0
	; >>>>> Line:	366
	; >>>>> while (iter != 0x0 && iter->priority < temp->priority){ 
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	367
	; >>>>> temp2 = iter; 
	mov	ax, word [bp-8]
	mov	word [bp-6], ax
	; >>>>> Line:	368
	; >>>>> iter = iter->next; 
	mov	si, word [bp-8]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-8], ax
L_yakc_120:
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_122
	mov	si, word [bp-8]
	add	si, 4
	mov	di, word [bp-4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_119
L_yakc_122:
L_yakc_121:
	; >>>>> Line:	370
	; >>>>> if (iter == 0x0){ 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_yakc_123
	; >>>>> Line:	371
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	372
	; >>>>> temp->prev = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	373
	; >>>>> temp->next = 0x0; 
	mov	si, word [bp-4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_124
L_yakc_123:
	; >>>>> Line:	376
	; >>>>> temp->next = iter; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [bp-8]
	mov	word [si], ax
	; >>>>> Line:	377
	; >>>>> temp->prev = temp2; 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-6]
	mov	word [si], ax
	; >>>>> Line:	378
	; >>>>> iter->prev = temp; 
	mov	si, word [bp-8]
	add	si, 10
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	379
	; >>>>> if (temp2 == 0x0) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_yakc_125
	; >>>>> Line:	380
	; >>>>> queue->blockedOn = temp; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	jmp	L_yakc_126
L_yakc_125:
	; >>>>> Line:	382
	; >>>>> temp2->next = temp; 
	mov	si, word [bp-6]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
L_yakc_126:
L_yakc_124:
	; >>>>> Line:	384
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	385
	; >>>>> goto TOP; 
	jmp	L_yakc_110
L_yakc_118:
L_yakc_115:
	; >>>>> Line:	388
	; >>>>> if (queue->b 
	call	YKExitMutex
	; >>>>> Line:	389
	; >>>>> return tempMsg; 
	mov	ax, word [bp-2]
L_yakc_127:
	mov	sp, bp
	pop	bp
	ret
L_yakc_111:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_112
	ALIGN	2
YKQPost:
	; >>>>> Line:	393
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	396
	; >>>>> if (queue->numOfMsgs < queue->numOfEntries){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_yakc_131
	; >>>>> Line:	397
	; >>>>> queue->baseAddress[queue->addLoc] = msg; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	399
	; >>>>> queue->addLoc++; 
	mov	si, word [bp+4]
	add	si, 4
	inc	word [si]
	; >>>>> Line:	401
	; >>>>> if (queue->addLoc >= queue->numOfEntries) 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_132
	; >>>>> Line:	402
	; >>>>> queue->addLoc = 0; 
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], 0
L_yakc_132:
	; >>>>> Line:	403
	; >>>>> queue->numOfMsgs++; 
	mov	si, word [bp+4]
	add	si, 10
	inc	word [si]
	; >>>>> Line:	405
	; >>>>> if (queue->blockedOn != 0x0){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_133
	; >>>>> Line:	406
	; >>>>> temp = queue->blockedOn; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	407
	; >>>>> queue->blockedOn = temp->next; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	408
	; >>>>> if (queue->b 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_134
	; >>>>> Line:	409
	; >>>>> queue->blockedOn->prev = 0x0;  
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	add	si, 10
	mov	word [si], 0
L_yakc_134:
	; >>>>> Line:	411
	; >>>>> temp->state = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	413
	; >>>>> temp2 = YKRdyList; 
	mov	ax, word [YKRdyList]
	mov	word [bp-4], ax
	; >>>>> Line:	414
	; >>>>> while (temp2->priority < temp->priority){ 
	jmp	L_yakc_136
L_yakc_135:
	; >>>>> Line:	415
	; >>>>> temp2 = temp2->next; 
	mov	si, word [bp-4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-4], ax
L_yakc_136:
	mov	si, word [bp-4]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jg	L_yakc_135
L_yakc_137:
	; >>>>> Line:	417
	; >>>>> if (temp2->prev == 0x0){ 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_138
	; >>>>> Line:	418
	; >>>>> YKRdyList = temp; 
	mov	ax, word [bp-2]
	mov	word [YKRdyList], ax
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	421
	; >>>>> temp2->prev->next = temp; 
	mov	si, word [bp-4]
	add	si, 10
	mov	si, word [si]
	add	si, 8
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_139:
	; >>>>> Line:	423
	; >>>>> temp->prev = temp2->prev; 
	mov	si, word [bp-4]
	add	si, 10
	mov	di, word [bp-2]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	424
	; >>>>> temp->next = temp2; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	425
	; >>>>> temp2->prev = te 
	mov	si, word [bp-4]
	add	si, 10
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	427
	; >>>>> if (nestingLevel == 0) 
	mov	ax, word [nestingLevel]
	test	ax, ax
	jne	L_yakc_140
	; >>>>> Line:	428
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_140:
L_yakc_133:
	; >>>>> Line:	431
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	432
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_141
	jmp	L_yakc_142
L_yakc_131:
	; >>>>> Line:	435
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	436
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_142:
L_yakc_141:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_130
	ALIGN	2
YKTickNum:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKRdyList:
	TIMES	2 db 0
YKCurTask:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailTCBList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	48 db 0
running:
	TIMES	2 db 0
idleStk:
	TIMES	4096 db 0
nestingLevel:
	TIMES	2 db 0
YKQAvailCount:
	TIMES	2 db 0
YKQs:
	TIMES	12 db 0
YKSems:
	TIMES	16 db 0
YKAvaiSems:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab6app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab6app_5:
	DB	"Max: ",0
L_lab6app_4:
	DB	"Min: ",0
L_lab6app_3:
	DB	0x9,0
L_lab6app_2:
	DB	"Ticks: ",0
L_lab6app_1:
	DB	"! Dropped msgs: tick ",0
	ALIGN	2
ATask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab6app_6
L_lab6app_7:
	; >>>>> Line:	30
	; >>>>> min = 100; 
	mov	word [bp-4], 100
	; >>>>> Line:	31
	; >>>>> max = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	32
	; >>>>> count = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	34
	; >>>>> while (1) 
	jmp	L_lab6app_9
L_lab6app_8:
	; >>>>> Line:	36
	; >>>>> tmp = (struct msg *) YKQPend(MsgQPtr);  
	push	word [MsgQPtr]
	call	YKQPend
	add	sp, 2
	mov	word [bp-2], ax
	; >>>>> Line:	39
	; >>>>> if (tmp->tick != count+1) 
	mov	ax, word [bp-8]
	inc	ax
	mov	si, word [bp-2]
	mov	dx, word [si]
	cmp	dx, ax
	je	L_lab6app_11
	; >>>>> Line:	41
	; >>>>> print("! Dropped msgs: tick ", 21); 
	mov	ax, 21
	push	ax
	mov	ax, L_lab6app_1
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	42
	; >>>>> if (tmp->tick - (count+1) > 1) { 
	mov	si, word [bp-2]
	mov	ax, word [si]
	sub	ax, word [bp-8]
	dec	ax
	cmp	ax, 1
	jle	L_lab6app_12
	; >>>>> Line:	43
	; >>>>> printInt(count+1); 
	mov	ax, word [bp-8]
	inc	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> print("\t", 1); 
	mov	al, 45
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_lab6app_13
L_lab6app_12:
	; >>>>> Line:	49
	; >>>>> printInt(tmp->tick-1); 
	mov	si, word [bp-2]
	mov	ax, word [si]
	dec	ax
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab6app_13:
L_lab6app_11:
	; >>>>> Line:	55
	; >>>>> count = tmp->tick; 
	mov	si, word [bp-2]
	mov	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	58
	; >>>>> if (tmp->data < min) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jle	L_lab6app_14
	; >>>>> Line:	59
	; >>>>> min = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-4], ax
L_lab6app_14:
	; >>>>> Line:	60
	; >>>>> if (tmp->data > max) 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [bp-6]
	cmp	ax, word [si]
	jge	L_lab6app_15
	; >>>>> Line:	61
	; >>>>> max = tmp->data; 
	mov	si, word [bp-2]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-6], ax
L_lab6app_15:
	; >>>>> Line:	64
	; >>>>> print("Ticks: ", 7); 
	mov	ax, 7
	push	ax
	mov	ax, L_lab6app_2
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	65
	; >>>>> printInt(count); 
	push	word [bp-8]
	call	printInt
	add	sp, 2
	; >>>>> Line:	66
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_lab6app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	67
	; >>>>>  
	mov	ax, 5
	push	ax
	mov	ax, L_lab6app_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	68
	; >>>>> printInt(min); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	69
	; >>>>> print("\t", 1); 
	mov	ax, 1
	push	ax
	mov	ax, L_lab6app_3
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	70
	; >>>>> print("Max: ", 5); 
	mov	ax, 5
	push	ax
	mov	ax, L_lab6app_5
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	71
	; >>>>> printInt(max); 
	push	word [bp-6]
	call	printInt
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab6app_9:
	jmp	L_lab6app_8
L_lab6app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab6app_6:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab6app_7
	ALIGN	2
BTask:
	; >>>>> Line:	77
	; >>>>> { 
	jmp	L_lab6app_17
L_lab6app_18:
	; >>>>> Line:	81
	; >>>>> curval = 1001; 
	mov	word [bp-4], 1001
	; >>>>> Line:	82
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	84
	; >>>>> while (1) 
	jmp	L_lab6app_20
L_lab6app_19:
	; >>>>> Line:	86
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	88
	; >>>>> if (GlobalFlag == 1) 
	cmp	word [GlobalFlag], 1
	jne	L_lab6app_22
	; >>>>> Line:	90
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	91
	; >>>>> busycount = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-2], ax
	; >>>>> Line:	92
	; >>>>> YKExitMutex() 
	call	YKExitMutex
	; >>>>> Line:	94
	; >>>>> while (1) 
	jmp	L_lab6app_24
L_lab6app_23:
	; >>>>> Line:	96
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	97
	; >>>>> tickNum = YKTickNum; 
	mov	ax, word [YKTickNum]
	mov	word [bp-12], ax
	; >>>>> Line:	98
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break;                 
	mov	ax, word [bp-2]
	add	ax, 5
	mov	dx, word [bp-12]
	cmp	dx, ax
	jb	L_lab6app_26
	; >>>>> Line:	99
	; >>>>> if(tickNum >= busycount + 5) break;                 
	jmp	L_lab6app_25
L_lab6app_26:
	; >>>>> Line:	101
	; >>>>> curval += 2;         
	add	word [bp-4], 2
	; >>>>> Line:	102
	; >>>>> flag = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	103
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-6], 3
	jmp	L_lab6app_28
L_lab6app_27:
	; >>>>> Line:	105
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-4]
	cwd
	idiv	word [bp-6]
	mov	ax, dx
	test	ax, ax
	jne	L_lab6app_31
	; >>>>> Line:	107
	; >>>>> flag = 1; 
	mov	word [bp-8], 1
	; >>>>> Line:	108
	; >>>>> break; 
	jmp	L_lab6app_29
L_lab6app_31:
L_lab6app_30:
	add	word [bp-6], 2
L_lab6app_28:
	mov	ax, word [bp-6]
	imul	word [bp-6]
	mov	dx, word [bp-4]
	cmp	dx, ax
	jg	L_lab6app_27
L_lab6app_29:
	; >>>>> Line:	111
	; >>>>> if (!flag) 
	mov	ax, word [bp-8]
	test	ax, ax
	jne	L_lab6app_32
	; >>>>> Line:	113
	; >>>>> printChar('.');  
	mov	al, 46
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	114
	; >>>>> if (++chcount > 75) 
	mov	ax, word [bp-10]
	inc	ax
	mov	word [bp-10], ax
	cmp	ax, 75
	jle	L_lab6app_33
	; >>>>> Line:	116
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	117
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
L_lab6app_33:
L_lab6app_32:
L_lab6app_24:
	jmp	L_lab6app_23
L_lab6app_25:
	; >>>>> Line:	121
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	122
	; >>>>> chcount = 0; 
	mov	word [bp-10], 0
	; >>>>> Line:	123
	; >>>>> GlobalFlag = 0;         
	mov	word [GlobalFlag], 0
L_lab6app_22:
L_lab6app_20:
	jmp	L_lab6app_19
L_lab6app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab6app_17:
	push	bp
	mov	bp, sp
	sub	sp, 12
	jmp	L_lab6app_18
L_lab6app_39:
	DB	"% >>>>>",0xD,0xA,0
L_lab6app_38:
	DB	", CPU usage: ",0
L_lab6app_37:
	DB	"<<<<< Context switches: ",0
L_lab6app_36:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab6app_35:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	129
	; >>>>> { 
	jmp	L_lab6app_40
L_lab6app_41:
	; >>>>> Line:	133
	; >>>>> (); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab6app_35
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab6app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	137
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	138
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	139
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	140
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	142
	; >>>>> YKNewTask(BTask, (void *) &BTaskStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (BTaskStk+1024)
	push	ax
	mov	ax, BTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	143
	; >>>>> YKNewTask(ATask, (void *) &ATaskStk[512], 20); 
	mov	al, 20
	push	ax
	mov	ax, (ATaskStk+1024)
	push	ax
	mov	ax, ATask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	145
	; >>>>> while (1) 
	jmp	L_lab6app_43
L_lab6app_42:
	; >>>>> Line:	147
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	149
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	150
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	151
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	152
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	154
	; >>>>> p 
	mov	ax, L_lab6app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	156
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab6app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	157
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	158
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	159
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab6app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	163
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	164
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab6app_43:
	jmp	L_lab6app_42
L_lab6app_44:
	mov	sp, bp
	pop	bp
	ret
L_lab6app_40:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab6app_41
	ALIGN	2
main:
	; >>>>> Line:	169
	; >>>>> { 
	jmp	L_lab6app_46
L_lab6app_47:
	; >>>>> Line:	170
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	173
	; >>>>> GlobalFlag = 0; 
	mov	word [GlobalFlag], 0
	; >>>>> Line:	174
	; >>>>> MsgQPtr = YKQCreate(MsgQ, 10); 
	mov	ax, 10
	push	ax
	mov	ax, MsgQ
	push	ax
	call	YKQCreate
	add	sp, 4
	mov	word [MsgQPtr], ax
	; >>>>> Line:	175
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	177
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab6app_46:
	push	bp
	mov	bp, sp
	jmp	L_lab6app_47
	ALIGN	2
MsgArray:
	TIMES	80 db 0
ATaskStk:
	TIMES	1024 db 0
BTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
GlobalFlag:
	TIMES	2 db 0
MsgQ:
	TIMES	20 db 0
MsgQPtr:
	TIMES	2 db 0
YKEnterMutex:
	cli
	ret

YKExitMutex:
	sti
	ret

YKSaveContext:
	push	ax
	push	bx
	push	cx
	push	dx
	push	es
	push	ds
	push 	si
	push	di
	push 	bp

	mov		bp, sp
	push	word[bp+18] ;move return address to top of stack
	mov		[bp+18], cx

	mov cx, [nestingLevel]
	cmp cx, 0
	jg	YKRet

	mov bx, [YKCurTask]
	mov bp, sp
	add	bp, 2
	mov [bx], bp

YKRet:
	ret

YKDispatcher:
	
	push bp 	
	mov bp, sp	
	cmp	byte[bp+4], 0		; compare arg1 with 0
	pop bp
	je	YKDispatcherExtra ; if arg1 == 0, do the extra dispatch code.
	
	push cs
	pushf
	call YKSaveContext

	mov	bp, sp
	mov	bx, [bp+20]
	mov	ax, [bp+24]
	mov	[bp+20], ax
	or bx, 0x00200
	mov	[bp+24], bx

YKDispatcherExtra:
	mov bx, [YKRdyList]
	mov sp, [bx]
	mov	[YKCurTask], bx
	call	YKRestoreContext
	iret
	
YKRestoreContext:
	
	; pop registers
	
	mov	bp, sp
	mov cx, [bp+20]
	pop	word[bp+20]
	
	pop		bp
	pop		di
	pop		si
	pop		ds
	pop		es
	pop		dx
	pop		cx
	pop		bx
	pop		ax
	ret

YKIMRInit:
	push ax
	push bp
	mov bp, sp
	mov al, [bp+6]
	pop bp
	pop ax
	ret